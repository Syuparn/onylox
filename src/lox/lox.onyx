use core { __flush_stdio, printf, tprintf }
use core.io
use core.os
use core.string
use runtime.platform

#load "./ast_printer"
#load "./interpreter"
#load "./options"
#load "./parser"
#load "./scanner"

had_error := false;
had_runtime_error := false;

Lox :: struct {
    interpreter: Interpreter = Interpreter.{};

    main :: (l: &Lox, args: [][&]u8) => {
        __flush_stdio();

        options := parse_commandline_options(args);
        switch options {
            case h: .Help {
                printf("Usage: onylox [script]\n");
            }
            case r: .Repl {
                printf("> ");
                l->_run_prompt();
            }
            case n: .FileName {
                l->_run_file(n);
            }
            // never reached
            case #default ---
        }
    }

    _run_prompt :: (l: &Lox) => {
        stdin := Lox._read_stdin();
        l->_run(stdin);
        // NOTE: ignore error for following lines
        had_error = false;
    }

    _read_stdin :: () -> str {
        // TODO: impl (platform.__read_from_input did not work properly)
        return "abc";
    }

    _run_file :: (l: &Lox, path: str) => {
        r := os.open(path, os.OpenMode.Read);

        switch r {
            case e: .Err {
                printf("Error: failed to read \"{}\": {}\n", path, e);
                os.exit(65);
            }
            case file: .Ok {
                defer os.close(&file);
                source := os.get_contents_from_file(&file);
                l->_run(source);
            }
        };

        if had_error {
            os.exit(65);
        }
        if had_runtime_error {
            os.exit(70);
        }
    }

    _run :: (l: &Lox, source: str) => {
        scanner := &Scanner.{source=source};
        tokens := scanner->scan_tokens();

        parser := &Parser.{tokens=tokens};
        // NOTE: ? cannot be used here, otherwise exit code is not set!
        result := parser->parse();

        if had_error {
            return .{};
        }
        stmts := result?;

        l.interpreter->interpret(&stmts);
    }

    error :: #match {
        (line: u32, message: str) {
            Lox._report(line, "", message);
        },
        (token: Token, message: str) {
            if token.type == TokenType.EOF {
                Lox._report(token.line, "at end", message);
            } else {
                Lox._report(token.line, tprintf("at '{}'", token.lexeme), message);
            }
        }
    }

    runtime_error :: (token: Token, message: str) {
        printf("{}\n[line {}]\n", message, token.line);
        had_runtime_error = true;

    }

    _report :: (line: u32, where_: str, message: str) {
        printf("[line {}] Error {}: {}\n", line, where_, message);
        had_error = true;
    }
}
