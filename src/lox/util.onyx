use core.list
use core.alloc.fixed

to_list :: (values: []$T) -> list.List(T) {
    l := list.make(T);
    for value: values {
        l->push_end(value);
    }
    return l;
}

// HACK: pointers CANNOT BE FREED!
to_pointer_list :: (values: []$T) -> list.List(&T) {
    l := list.make(&T);
    for value: values {
        value_ptr := context.allocator->move(value);
        l->push_end(value_ptr);
    }
    return l;
}

is_empty :: (o: ?$T) -> bool {
    switch o {
        case .None {
            return true;
        }
        case #default {
            return false;
        }
    }
}

// NOTE: List#count cannot be called from List($T) due to type mismatch
list_count :: ($T: type_expr, list: list.List(T)) -> i32 {
    c := 0;
    elem := list.first;
    while elem != null {
        c += 1;
        elem = elem.next;
    }

    return c;
}

// NOTE: list.from_array does not work...
// TODO: replace with the original
from_array :: (arr: [] $T, allocator := context.allocator) -> list.List(T) {
    l := list.make(T, allocator);
    for& arr {
        list.push_end(&l, *it);
    }
    return l;
}
