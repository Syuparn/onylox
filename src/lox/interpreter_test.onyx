#load "./expr"
#load "./interpreter"
#load "./token"
#load "./token_type"

use core { tprintf }
use core.iter

test_interpreter_evaluate :: () => {
    TestCase :: struct {
        title: str;
        expr: Expr;
        expected: LoxObject;
    }
    tests := TestCase.[
        .{
            title="string literal",
            expr=Expr.{Literal=LiteralExpr.{value=TokenLiteral.{String="foo"}}},
            expected=LoxObject.{String="foo"},
        },
        .{
            title="number literal",
            expr=Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=123}}},
            expected=LoxObject.{Number=123},
        },
        .{
            title="bool literal",
            expr=Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Bool=false}}},
            expected=LoxObject.{Bool=false},
        },
        .{
            title="null literal",
            expr=Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Null=.{}}}},
            expected=LoxObject.{Null=.{}},
        },
        .{
            title="group",
            expr=Expr.{Group=GroupExpr.{
                expression=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=123}}},
            }},
            expected=LoxObject.{Number=123},
        },
        .{
            title="unary minus",
            expr=Expr.{Unary=UnaryExpr.{
                operator=Token.{type=TokenType.MINUS, lexeme="-"},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=123}}},
            }},
            expected=LoxObject.{Number=-123},
        },
        .{
            title="unary bang (false)",
            expr=Expr.{Unary=UnaryExpr.{
                operator=Token.{type=TokenType.BANG, lexeme="!"},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Bool=false}}},
            }},
            expected=LoxObject.{Bool=true},
        },
        .{
            title="unary bang (nil)",
            expr=Expr.{Unary=UnaryExpr.{
                operator=Token.{type=TokenType.BANG, lexeme="!"},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Null=.{}}}},
            }},
            expected=LoxObject.{Bool=true},
        },
        .{
            title="unary bang (true)",
            expr=Expr.{Unary=UnaryExpr.{
                operator=Token.{type=TokenType.BANG, lexeme="!"},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Bool=true}}},
            }},
            expected=LoxObject.{Bool=false},
        },
        .{
            title="unary bang (number)",
            expr=Expr.{Unary=UnaryExpr.{
                operator=Token.{type=TokenType.BANG, lexeme="!"},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=123}}},
            }},
            expected=LoxObject.{Bool=false},
        },
        .{
            title="binary minus",
            expr=Expr.{Binary=BinaryExpr.{
                left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=3}}},
                operator=Token.{type=TokenType.MINUS, lexeme="-"},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=1}}},
            }},
            expected=LoxObject.{Number=2},
        },
        .{
            title="binary slash",
            expr=Expr.{Binary=BinaryExpr.{
                left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=6}}},
                operator=Token.{type=TokenType.SLASH, lexeme="/"},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=3}}},
            }},
            expected=LoxObject.{Number=2},
        },
        .{
            title="binary star",
            expr=Expr.{Binary=BinaryExpr.{
                left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=6}}},
                operator=Token.{type=TokenType.STAR, lexeme="*"},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=3}}},
            }},
            expected=LoxObject.{Number=18},
        },
        .{
            title="binary plus (number)",
            expr=Expr.{Binary=BinaryExpr.{
                left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=6}}},
                operator=Token.{type=TokenType.PLUS, lexeme="+"},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=3}}},
            }},
            expected=LoxObject.{Number=9},
        },
        .{
            title="binary plus (string)",
            expr=Expr.{Binary=BinaryExpr.{
                left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{String="foo"}}},
                operator=Token.{type=TokenType.PLUS, lexeme="+"},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{String="bar"}}},
            }},
            expected=LoxObject.{String="foobar"},
        },
        .{
            title="binary greater",
            expr=Expr.{Binary=BinaryExpr.{
                left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=6}}},
                operator=Token.{type=TokenType.GREATER, lexeme=">"},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=3}}},
            }},
            expected=LoxObject.{Bool=true},
        },
        .{
            title="binary greater equal",
            expr=Expr.{Binary=BinaryExpr.{
                left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=6}}},
                operator=Token.{type=TokenType.GREATER_EQUAL, lexeme=">="},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=3}}},
            }},
            expected=LoxObject.{Bool=true},
        },
        .{
            title="binary less",
            expr=Expr.{Binary=BinaryExpr.{
                left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=6}}},
                operator=Token.{type=TokenType.LESS, lexeme="<"},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=3}}},
            }},
            expected=LoxObject.{Bool=false},
        },
        .{
            title="binary less equal",
            expr=Expr.{Binary=BinaryExpr.{
                left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=6}}},
                operator=Token.{type=TokenType.LESS, lexeme="<="},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=3}}},
            }},
            expected=LoxObject.{Bool=false},
        },
        .{
            title="binary equal equal (number)",
            expr=Expr.{Binary=BinaryExpr.{
                left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=6}}},
                operator=Token.{type=TokenType.EQUAL_EQUAL, lexeme="=="},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=6}}},
            }},
            expected=LoxObject.{Bool=true},
        },
        .{
            title="binary equal equal (string)",
            expr=Expr.{Binary=BinaryExpr.{
                left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{String="foo"}}},
                operator=Token.{type=TokenType.EQUAL_EQUAL, lexeme="=="},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{String="foo"}}},
            }},
            expected=LoxObject.{Bool=true},
        },
        .{
            title="binary equal equal (bool)",
            expr=Expr.{Binary=BinaryExpr.{
                left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Bool=true}}},
                operator=Token.{type=TokenType.EQUAL_EQUAL, lexeme="=="},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Bool=true}}},
            }},
            expected=LoxObject.{Bool=true},
        },
        .{
            title="binary equal equal (nil)",
            expr=Expr.{Binary=BinaryExpr.{
                left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Null=.{}}}},
                operator=Token.{type=TokenType.EQUAL_EQUAL, lexeme="=="},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Null=.{}}}},
            }},
            expected=LoxObject.{Bool=true},
        },
        .{
            title="binary equal equal (different type)",
            expr=Expr.{Binary=BinaryExpr.{
                left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=6}}},
                operator=Token.{type=TokenType.EQUAL_EQUAL, lexeme="=="},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{String="foo"}}},
            }},
            expected=LoxObject.{Bool=false},
        },
        .{
            title="binary bang equal (number)",
            expr=Expr.{Binary=BinaryExpr.{
                left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=6}}},
                operator=Token.{type=TokenType.BANG_EQUAL, lexeme="!="},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=7}}},
            }},
            expected=LoxObject.{Bool=true},
        },
        .{
            title="binary bang equal (string)",
            expr=Expr.{Binary=BinaryExpr.{
                left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{String="foo"}}},
                operator=Token.{type=TokenType.BANG_EQUAL, lexeme="!="},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{String="bar"}}},
            }},
            expected=LoxObject.{Bool=true},
        },
        .{
            title="binary bang equal (bool)",
            expr=Expr.{Binary=BinaryExpr.{
                left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Bool=true}}},
                operator=Token.{type=TokenType.BANG_EQUAL, lexeme="!="},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Bool=false}}},
            }},
            expected=LoxObject.{Bool=true},
        },
        .{
            title="binary bang equal (nil)",
            expr=Expr.{Binary=BinaryExpr.{
                left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Null=.{}}}},
                operator=Token.{type=TokenType.BANG_EQUAL, lexeme="!="},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Null=.{}}}},
            }},
            expected=LoxObject.{Bool=false},
        },
        .{
            title="binary bang equal (different type)",
            expr=Expr.{Binary=BinaryExpr.{
                left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=6}}},
                operator=Token.{type=TokenType.BANG_EQUAL, lexeme="!="},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{String="foo"}}},
            }},
            expected=LoxObject.{Bool=true},
        },
    ];

    for tt: tests {
        interpreter := Interpreter.{};
        actual := interpreter->evaluate(tt.expr)->expect(tprintf("{}: must not be error", tt.title));

        assert(actual == tt.expected, tprintf("{}: \"{}\" != \"{}\"", tt.title, actual, tt.expected));
    }
}

test_interpreter_evaluate_error :: () => {
    TestCase :: struct {
        title: str;
        expr: Expr;
        expected: RuntimeError;
    }
    tests := TestCase.[
        .{
            title="-{string}",
            expr=Expr.{Unary=UnaryExpr.{
                operator=Token.{type=TokenType.MINUS, lexeme="-"},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{String="foo"}}},
            }},
            expected=RuntimeError.{token=Token.{type=TokenType.MINUS, lexeme="-"}, message="Operand must be a number."},
        },
        .{
            title="{string} > {number}",
            expr=Expr.{Binary=BinaryExpr.{
                left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{String="foo"}}},
                operator=Token.{type=TokenType.GREATER, lexeme=">"},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=123}}},
            }},
            expected=RuntimeError.{token=Token.{type=TokenType.GREATER, lexeme=">"}, message="Operand must be numbers."},
        },
        .{
            title="{number} > {string}",
            expr=Expr.{Binary=BinaryExpr.{
                left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=123}}},
                operator=Token.{type=TokenType.GREATER, lexeme=">"},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{String="foo"}}},
            }},
            expected=RuntimeError.{token=Token.{type=TokenType.GREATER, lexeme=">"}, message="Operand must be numbers."},
        },
        .{
            title="{string} >= {number}",
            expr=Expr.{Binary=BinaryExpr.{
                left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{String="foo"}}},
                operator=Token.{type=TokenType.GREATER_EQUAL, lexeme=">"},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=123}}},
            }},
            expected=RuntimeError.{token=Token.{type=TokenType.GREATER_EQUAL, lexeme=">"}, message="Operand must be numbers."},
        },
        .{
            title="{number} >= {string}",
            expr=Expr.{Binary=BinaryExpr.{
                left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=123}}},
                operator=Token.{type=TokenType.GREATER_EQUAL, lexeme=">"},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{String="foo"}}},
            }},
            expected=RuntimeError.{token=Token.{type=TokenType.GREATER_EQUAL, lexeme=">"}, message="Operand must be numbers."},
        },
        .{
            title="{string} < {number}",
            expr=Expr.{Binary=BinaryExpr.{
                left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{String="foo"}}},
                operator=Token.{type=TokenType.LESS, lexeme="<"},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=123}}},
            }},
            expected=RuntimeError.{token=Token.{type=TokenType.LESS, lexeme="<"}, message="Operand must be numbers."},
        },
        .{
            title="{number} < {string}",
            expr=Expr.{Binary=BinaryExpr.{
                left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=123}}},
                operator=Token.{type=TokenType.LESS, lexeme="<"},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{String="foo"}}},
            }},
            expected=RuntimeError.{token=Token.{type=TokenType.LESS, lexeme="<"}, message="Operand must be numbers."},
        },
        .{
            title="{string} <= {number}",
            expr=Expr.{Binary=BinaryExpr.{
                left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{String="foo"}}},
                operator=Token.{type=TokenType.LESS_EQUAL, lexeme="<="},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=123}}},
            }},
            expected=RuntimeError.{token=Token.{type=TokenType.LESS_EQUAL, lexeme="<="}, message="Operand must be numbers."},
        },
        .{
            title="{number} <= {string}",
            expr=Expr.{Binary=BinaryExpr.{
                left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=123}}},
                operator=Token.{type=TokenType.LESS_EQUAL, lexeme="<="},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{String="foo"}}},
            }},
            expected=RuntimeError.{token=Token.{type=TokenType.LESS_EQUAL, lexeme="<="}, message="Operand must be numbers."},
        },
        .{
            title="{number} - {string}",
            expr=Expr.{Binary=BinaryExpr.{
                left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=123}}},
                operator=Token.{type=TokenType.MINUS, lexeme="-"},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{String="foo"}}},
            }},
            expected=RuntimeError.{token=Token.{type=TokenType.MINUS, lexeme="-"}, message="Operand must be numbers."},
        },
        .{
            title="{number} - {string}",
            expr=Expr.{Binary=BinaryExpr.{
                left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=123}}},
                operator=Token.{type=TokenType.MINUS, lexeme="-"},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{String="foo"}}},
            }},
            expected=RuntimeError.{token=Token.{type=TokenType.MINUS, lexeme="-"}, message="Operand must be numbers."},
        },
        .{
            title="{number} / {string}",
            expr=Expr.{Binary=BinaryExpr.{
                left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=123}}},
                operator=Token.{type=TokenType.SLASH, lexeme="/"},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{String="foo"}}},
            }},
            expected=RuntimeError.{token=Token.{type=TokenType.SLASH, lexeme="/"}, message="Operand must be numbers."},
        },
        .{
            title="{number} / {string}",
            expr=Expr.{Binary=BinaryExpr.{
                left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=123}}},
                operator=Token.{type=TokenType.SLASH, lexeme="/"},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{String="foo"}}},
            }},
            expected=RuntimeError.{token=Token.{type=TokenType.SLASH, lexeme="/"}, message="Operand must be numbers."},
        },
        .{
            title="{number} * {string}",
            expr=Expr.{Binary=BinaryExpr.{
                left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=123}}},
                operator=Token.{type=TokenType.STAR, lexeme="*"},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{String="foo"}}},
            }},
            expected=RuntimeError.{token=Token.{type=TokenType.STAR, lexeme="*"}, message="Operand must be numbers."},
        },
        .{
            title="{number} * {string}",
            expr=Expr.{Binary=BinaryExpr.{
                left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=123}}},
                operator=Token.{type=TokenType.STAR, lexeme="*"},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{String="foo"}}},
            }},
            expected=RuntimeError.{token=Token.{type=TokenType.STAR, lexeme="*"}, message="Operand must be numbers."},
        },
        .{
            title="{number} + {string}",
            expr=Expr.{Binary=BinaryExpr.{
                left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=123}}},
                operator=Token.{type=TokenType.PLUS, lexeme="+"},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{String="foo"}}},
            }},
            expected=RuntimeError.{token=Token.{type=TokenType.PLUS, lexeme="+"}, message="Operand must be two numbers or two strings."},
        },
        .{
            title="{number} + {string}",
            expr=Expr.{Binary=BinaryExpr.{
                left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=123}}},
                operator=Token.{type=TokenType.PLUS, lexeme="+"},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{String="foo"}}},
            }},
            expected=RuntimeError.{token=Token.{type=TokenType.PLUS, lexeme="+"}, message="Operand must be two numbers or two strings."},
        },
    ];

    for tt: tests {
        interpreter := Interpreter.{};
        actual := interpreter->evaluate(tt.expr);
        assert(actual->is_err(), tprintf("{}: must be an error", tt.title));
        e := actual->err()?;

        assert(e.message == tt.expected.message, tprintf("{}: \"{}\" != \"{}\"", tt.title, e.message, tt.expected.message));
        assert(e.token.type == tt.expected.token.type, tprintf("{}: \"{}\" != \"{}\"", tt.title, e.token.type, tt.expected.token.type));
    }
}

// todo: interpret program, stmts, stmt

main :: () {
    test_interpreter_evaluate();
    test_interpreter_evaluate_error();
}
