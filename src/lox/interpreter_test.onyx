#load "./expr"
#load "./interpreter"
#load "./token"
#load "./token_type"
#load "./util"

use core { printf, tprintf }
use core.iter
use core.list

test_interpreter_evaluate :: () => {
    TestCase :: struct {
        title: str;
        expr: Expr;
        expected: LoxObject;
    }
    tests := TestCase.[
        .{
            title="string literal",
            expr=Expr.{Literal=LiteralExpr.{value=TokenLiteral.{String="foo"}}},
            expected=LoxObject.{String="foo"},
        },
        .{
            title="number literal",
            expr=Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=123}}},
            expected=LoxObject.{Number=123},
        },
        .{
            title="bool literal",
            expr=Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Bool=false}}},
            expected=LoxObject.{Bool=false},
        },
        .{
            title="null literal",
            expr=Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Null=.{}}}},
            expected=LoxObject.{Null=.{}},
        },
        .{
            title="group",
            expr=Expr.{Group=GroupExpr.{
                expression=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=123}}},
            }},
            expected=LoxObject.{Number=123},
        },
        .{
            title="unary minus",
            expr=Expr.{Unary=UnaryExpr.{
                operator=Token.{type=TokenType.MINUS, lexeme="-"},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=123}}},
            }},
            expected=LoxObject.{Number=-123},
        },
        .{
            title="unary bang (false)",
            expr=Expr.{Unary=UnaryExpr.{
                operator=Token.{type=TokenType.BANG, lexeme="!"},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Bool=false}}},
            }},
            expected=LoxObject.{Bool=true},
        },
        .{
            title="unary bang (nil)",
            expr=Expr.{Unary=UnaryExpr.{
                operator=Token.{type=TokenType.BANG, lexeme="!"},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Null=.{}}}},
            }},
            expected=LoxObject.{Bool=true},
        },
        .{
            title="unary bang (true)",
            expr=Expr.{Unary=UnaryExpr.{
                operator=Token.{type=TokenType.BANG, lexeme="!"},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Bool=true}}},
            }},
            expected=LoxObject.{Bool=false},
        },
        .{
            title="unary bang (number)",
            expr=Expr.{Unary=UnaryExpr.{
                operator=Token.{type=TokenType.BANG, lexeme="!"},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=123}}},
            }},
            expected=LoxObject.{Bool=false},
        },
        .{
            title="binary minus",
            expr=Expr.{Binary=BinaryExpr.{
                left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=3}}},
                operator=Token.{type=TokenType.MINUS, lexeme="-"},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=1}}},
            }},
            expected=LoxObject.{Number=2},
        },
        .{
            title="binary slash",
            expr=Expr.{Binary=BinaryExpr.{
                left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=6}}},
                operator=Token.{type=TokenType.SLASH, lexeme="/"},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=3}}},
            }},
            expected=LoxObject.{Number=2},
        },
        .{
            title="binary star",
            expr=Expr.{Binary=BinaryExpr.{
                left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=6}}},
                operator=Token.{type=TokenType.STAR, lexeme="*"},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=3}}},
            }},
            expected=LoxObject.{Number=18},
        },
        .{
            title="binary plus (number)",
            expr=Expr.{Binary=BinaryExpr.{
                left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=6}}},
                operator=Token.{type=TokenType.PLUS, lexeme="+"},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=3}}},
            }},
            expected=LoxObject.{Number=9},
        },
        .{
            title="binary plus (string)",
            expr=Expr.{Binary=BinaryExpr.{
                left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{String="foo"}}},
                operator=Token.{type=TokenType.PLUS, lexeme="+"},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{String="bar"}}},
            }},
            expected=LoxObject.{String="foobar"},
        },
        .{
            title="binary greater",
            expr=Expr.{Binary=BinaryExpr.{
                left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=6}}},
                operator=Token.{type=TokenType.GREATER, lexeme=">"},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=3}}},
            }},
            expected=LoxObject.{Bool=true},
        },
        .{
            title="binary greater equal",
            expr=Expr.{Binary=BinaryExpr.{
                left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=6}}},
                operator=Token.{type=TokenType.GREATER_EQUAL, lexeme=">="},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=3}}},
            }},
            expected=LoxObject.{Bool=true},
        },
        .{
            title="binary less",
            expr=Expr.{Binary=BinaryExpr.{
                left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=6}}},
                operator=Token.{type=TokenType.LESS, lexeme="<"},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=3}}},
            }},
            expected=LoxObject.{Bool=false},
        },
        .{
            title="binary less equal",
            expr=Expr.{Binary=BinaryExpr.{
                left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=6}}},
                operator=Token.{type=TokenType.LESS, lexeme="<="},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=3}}},
            }},
            expected=LoxObject.{Bool=false},
        },
        .{
            title="binary equal equal (number)",
            expr=Expr.{Binary=BinaryExpr.{
                left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=6}}},
                operator=Token.{type=TokenType.EQUAL_EQUAL, lexeme="=="},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=6}}},
            }},
            expected=LoxObject.{Bool=true},
        },
        .{
            title="binary equal equal (string)",
            expr=Expr.{Binary=BinaryExpr.{
                left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{String="foo"}}},
                operator=Token.{type=TokenType.EQUAL_EQUAL, lexeme="=="},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{String="foo"}}},
            }},
            expected=LoxObject.{Bool=true},
        },
        .{
            title="binary equal equal (bool)",
            expr=Expr.{Binary=BinaryExpr.{
                left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Bool=true}}},
                operator=Token.{type=TokenType.EQUAL_EQUAL, lexeme="=="},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Bool=true}}},
            }},
            expected=LoxObject.{Bool=true},
        },
        .{
            title="binary equal equal (nil)",
            expr=Expr.{Binary=BinaryExpr.{
                left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Null=.{}}}},
                operator=Token.{type=TokenType.EQUAL_EQUAL, lexeme="=="},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Null=.{}}}},
            }},
            expected=LoxObject.{Bool=true},
        },
        .{
            title="binary equal equal (different type)",
            expr=Expr.{Binary=BinaryExpr.{
                left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=6}}},
                operator=Token.{type=TokenType.EQUAL_EQUAL, lexeme="=="},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{String="foo"}}},
            }},
            expected=LoxObject.{Bool=false},
        },
        .{
            title="binary bang equal (number)",
            expr=Expr.{Binary=BinaryExpr.{
                left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=6}}},
                operator=Token.{type=TokenType.BANG_EQUAL, lexeme="!="},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=7}}},
            }},
            expected=LoxObject.{Bool=true},
        },
        .{
            title="binary bang equal (string)",
            expr=Expr.{Binary=BinaryExpr.{
                left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{String="foo"}}},
                operator=Token.{type=TokenType.BANG_EQUAL, lexeme="!="},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{String="bar"}}},
            }},
            expected=LoxObject.{Bool=true},
        },
        .{
            title="binary bang equal (bool)",
            expr=Expr.{Binary=BinaryExpr.{
                left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Bool=true}}},
                operator=Token.{type=TokenType.BANG_EQUAL, lexeme="!="},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Bool=false}}},
            }},
            expected=LoxObject.{Bool=true},
        },
        .{
            title="binary bang equal (nil)",
            expr=Expr.{Binary=BinaryExpr.{
                left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Null=.{}}}},
                operator=Token.{type=TokenType.BANG_EQUAL, lexeme="!="},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Null=.{}}}},
            }},
            expected=LoxObject.{Bool=false},
        },
        .{
            title="binary bang equal (different type)",
            expr=Expr.{Binary=BinaryExpr.{
                left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=6}}},
                operator=Token.{type=TokenType.BANG_EQUAL, lexeme="!="},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{String="foo"}}},
            }},
            expected=LoxObject.{Bool=true},
        },
        .{
            title="logical or (left)",
            expr=Expr.{Logical=LogicalExpr.{
                left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=6}}},
                operator=Token.{type=TokenType.OR, lexeme="or"},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=3}}},
            }},
            expected=LoxObject.{Number=6},
        },
        .{
            title="logical or (right)",
            expr=Expr.{Logical=LogicalExpr.{
                left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Bool=false}}},
                operator=Token.{type=TokenType.OR, lexeme="or"},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=3}}},
            }},
            expected=LoxObject.{Number=3},
        },
        .{
            title="logical and (right)",
            expr=Expr.{Logical=LogicalExpr.{
                left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=6}}},
                operator=Token.{type=TokenType.AND, lexeme="and"},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=3}}},
            }},
            expected=LoxObject.{Number=3},
        },
        .{
            title="logical and (left)",
            expr=Expr.{Logical=LogicalExpr.{
                left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Bool=false}}},
                operator=Token.{type=TokenType.AND, lexeme="and"},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=3}}},
            }},
            expected=LoxObject.{Bool=false},
        },
    ];

    for tt: tests {
        interpreter := Interpreter.{};
        actual := interpreter->evaluate(tt.expr)->expect(tprintf("{}: must not be error", tt.title));

        assert(actual == tt.expected, tprintf("{}: \"{}\" != \"{}\"", tt.title, actual, tt.expected));
    }
}

test_interpreter_evaluate_variable :: () => {
    TestCase :: struct {
        title: str;
        expr: Expr;
        expected: LoxObject;
    }
    tests := TestCase.[
        .{
            title="variable",
            expr=Expr.{Variable=VariableExpr.{name=Token.{type=TokenType.IDENTIFIER, lexeme="foo"}}},
            expected=LoxObject.{Number=1},
        },
        .{
            title="call built-in dummy func",
            expr=Expr.{Call=CallExpr.{
                callee=&Expr.{Variable=VariableExpr.{name=Token.{type=TokenType.IDENTIFIER, lexeme="dummy"}}},
                paren=Token.{type=TokenType.RIGHT_PAREN, lexeme=")"},
                arguments=to_pointer_list(Expr.[]),
            }},
            expected=LoxObject.{String="dummy"},
        },
    ];

    for tt: tests {
        interpreter := Interpreter.{};
        // prepare: set value
        interpreter.environment->define("foo", tt.expected);
        interpreter.environment->define("dummy", new_dummy_func_object());

        result := interpreter->evaluate(tt.expr);
        actual := result->expect(tprintf("{}: must not be error: {}", tt.title, result->err()));

        assert(actual == tt.expected, tprintf("{}: \"{}\" != \"{}\"", tt.title, actual, tt.expected));
    }
}

test_interpreter_evaluate_assign :: () => {
    TestCase :: struct {
        title: str;
        expr: Expr;
        init: LoxObject;
        expected: LoxObject;
    }
    tests := TestCase.[
        .{
            title="variable",
            expr=Expr.{Assign=AssignExpr.{
                name=Token.{type=TokenType.IDENTIFIER, lexeme="foo"},
                value=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=1}}},
            }},
            init=LoxObject.{String="a"},
            expected=LoxObject.{Number=1},
        },
    ];

    for tt: tests {
        interpreter := Interpreter.{};
        // prepare: set value
        interpreter.environment->define("foo", tt.init);

        actual := interpreter->evaluate(tt.expr)->expect(tprintf("{}: must not be error", tt.title));

        assert(actual == tt.expected, tprintf("{}: \"{}\" != \"{}\"", tt.title, actual, tt.expected));
    }
}

test_interpreter_evaluate_error :: () => {
    TestCase :: struct {
        title: str;
        expr: Expr;
        expected: RuntimeError;
    }
    tests := TestCase.[
        .{
            title="-{string}",
            expr=Expr.{Unary=UnaryExpr.{
                operator=Token.{type=TokenType.MINUS, lexeme="-"},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{String="foo"}}},
            }},
            expected=RuntimeError.{token=Token.{type=TokenType.MINUS, lexeme="-"}, message="Operand must be a number."},
        },
        .{
            title="{string} > {number}",
            expr=Expr.{Binary=BinaryExpr.{
                left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{String="foo"}}},
                operator=Token.{type=TokenType.GREATER, lexeme=">"},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=123}}},
            }},
            expected=RuntimeError.{token=Token.{type=TokenType.GREATER, lexeme=">"}, message="Operand must be numbers."},
        },
        .{
            title="{number} > {string}",
            expr=Expr.{Binary=BinaryExpr.{
                left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=123}}},
                operator=Token.{type=TokenType.GREATER, lexeme=">"},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{String="foo"}}},
            }},
            expected=RuntimeError.{token=Token.{type=TokenType.GREATER, lexeme=">"}, message="Operand must be numbers."},
        },
        .{
            title="{string} >= {number}",
            expr=Expr.{Binary=BinaryExpr.{
                left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{String="foo"}}},
                operator=Token.{type=TokenType.GREATER_EQUAL, lexeme=">"},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=123}}},
            }},
            expected=RuntimeError.{token=Token.{type=TokenType.GREATER_EQUAL, lexeme=">"}, message="Operand must be numbers."},
        },
        .{
            title="{number} >= {string}",
            expr=Expr.{Binary=BinaryExpr.{
                left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=123}}},
                operator=Token.{type=TokenType.GREATER_EQUAL, lexeme=">"},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{String="foo"}}},
            }},
            expected=RuntimeError.{token=Token.{type=TokenType.GREATER_EQUAL, lexeme=">"}, message="Operand must be numbers."},
        },
        .{
            title="{string} < {number}",
            expr=Expr.{Binary=BinaryExpr.{
                left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{String="foo"}}},
                operator=Token.{type=TokenType.LESS, lexeme="<"},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=123}}},
            }},
            expected=RuntimeError.{token=Token.{type=TokenType.LESS, lexeme="<"}, message="Operand must be numbers."},
        },
        .{
            title="{number} < {string}",
            expr=Expr.{Binary=BinaryExpr.{
                left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=123}}},
                operator=Token.{type=TokenType.LESS, lexeme="<"},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{String="foo"}}},
            }},
            expected=RuntimeError.{token=Token.{type=TokenType.LESS, lexeme="<"}, message="Operand must be numbers."},
        },
        .{
            title="{string} <= {number}",
            expr=Expr.{Binary=BinaryExpr.{
                left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{String="foo"}}},
                operator=Token.{type=TokenType.LESS_EQUAL, lexeme="<="},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=123}}},
            }},
            expected=RuntimeError.{token=Token.{type=TokenType.LESS_EQUAL, lexeme="<="}, message="Operand must be numbers."},
        },
        .{
            title="{number} <= {string}",
            expr=Expr.{Binary=BinaryExpr.{
                left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=123}}},
                operator=Token.{type=TokenType.LESS_EQUAL, lexeme="<="},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{String="foo"}}},
            }},
            expected=RuntimeError.{token=Token.{type=TokenType.LESS_EQUAL, lexeme="<="}, message="Operand must be numbers."},
        },
        .{
            title="{number} - {string}",
            expr=Expr.{Binary=BinaryExpr.{
                left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=123}}},
                operator=Token.{type=TokenType.MINUS, lexeme="-"},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{String="foo"}}},
            }},
            expected=RuntimeError.{token=Token.{type=TokenType.MINUS, lexeme="-"}, message="Operand must be numbers."},
        },
        .{
            title="{number} - {string}",
            expr=Expr.{Binary=BinaryExpr.{
                left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=123}}},
                operator=Token.{type=TokenType.MINUS, lexeme="-"},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{String="foo"}}},
            }},
            expected=RuntimeError.{token=Token.{type=TokenType.MINUS, lexeme="-"}, message="Operand must be numbers."},
        },
        .{
            title="{number} / {string}",
            expr=Expr.{Binary=BinaryExpr.{
                left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=123}}},
                operator=Token.{type=TokenType.SLASH, lexeme="/"},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{String="foo"}}},
            }},
            expected=RuntimeError.{token=Token.{type=TokenType.SLASH, lexeme="/"}, message="Operand must be numbers."},
        },
        .{
            title="{number} / {string}",
            expr=Expr.{Binary=BinaryExpr.{
                left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=123}}},
                operator=Token.{type=TokenType.SLASH, lexeme="/"},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{String="foo"}}},
            }},
            expected=RuntimeError.{token=Token.{type=TokenType.SLASH, lexeme="/"}, message="Operand must be numbers."},
        },
        .{
            title="{number} * {string}",
            expr=Expr.{Binary=BinaryExpr.{
                left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=123}}},
                operator=Token.{type=TokenType.STAR, lexeme="*"},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{String="foo"}}},
            }},
            expected=RuntimeError.{token=Token.{type=TokenType.STAR, lexeme="*"}, message="Operand must be numbers."},
        },
        .{
            title="{number} * {string}",
            expr=Expr.{Binary=BinaryExpr.{
                left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=123}}},
                operator=Token.{type=TokenType.STAR, lexeme="*"},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{String="foo"}}},
            }},
            expected=RuntimeError.{token=Token.{type=TokenType.STAR, lexeme="*"}, message="Operand must be numbers."},
        },
        .{
            title="{number} + {string}",
            expr=Expr.{Binary=BinaryExpr.{
                left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=123}}},
                operator=Token.{type=TokenType.PLUS, lexeme="+"},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{String="foo"}}},
            }},
            expected=RuntimeError.{token=Token.{type=TokenType.PLUS, lexeme="+"}, message="Operand must be two numbers or two strings."},
        },
        .{
            title="{number} + {string}",
            expr=Expr.{Binary=BinaryExpr.{
                left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=123}}},
                operator=Token.{type=TokenType.PLUS, lexeme="+"},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{String="foo"}}},
            }},
            expected=RuntimeError.{token=Token.{type=TokenType.PLUS, lexeme="+"}, message="Operand must be two numbers or two strings."},
        },
        .{
            title="variable is not defined",
            expr=Expr.{Assign=AssignExpr.{
                name=Token.{type=TokenType.IDENTIFIER, lexeme="foo"},
                value=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=1}}},
            }},
            expected=RuntimeError.{token=Token.{type=TokenType.IDENTIFIER, lexeme="foo"}, message="Undefined varible 'foo'."},
        },
        .{
            title="call non-callable",
            expr=Expr.{Call=CallExpr.{
                callee=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=1}}},
                paren=Token.{type=TokenType.RIGHT_PAREN, lexeme=")"},
                arguments=to_pointer_list(Expr.[]),
            }},
            expected=RuntimeError.{token=Token.{type=TokenType.RIGHT_PAREN, lexeme=")"}, message="Can only call functions and clauses."},
        },
        .{
            title="arity is wrong",
            expr=Expr.{Call=CallExpr.{
                callee=&Expr.{Variable=VariableExpr.{name=Token.{type=TokenType.IDENTIFIER, lexeme="dummy"}}},
                paren=Token.{type=TokenType.RIGHT_PAREN, lexeme=")"},
                arguments=to_pointer_list(Expr.[
                    Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=1}}},
                ]),
            }},
            expected=RuntimeError.{token=Token.{type=TokenType.RIGHT_PAREN, lexeme=")"}, message="Expected 0 arguments but got 1."},
        },
    ];

    for tt: tests {
        interpreter := Interpreter.{};
        // prepare dummy built-in function
        interpreter.environment->define("dummy", new_dummy_func_object());

        actual := interpreter->evaluate(tt.expr);
        assert(actual->is_err(), tprintf("{}: must be an error", tt.title));
        e := actual->err()?;

        assert(e.message == tt.expected.message, tprintf("{}: \"{}\" != \"{}\"", tt.title, e.message, tt.expected.message));
        assert(e.token.type == tt.expected.token.type, tprintf("{}: \"{}\" != \"{}\"", tt.title, e.token.type, tt.expected.token.type));
    }
}

test_interpreter_execute_error :: () => {
    TestCase :: struct {
        title: str;
        stmt: Stmt;
        expected: RuntimeError;
    }
    tests := TestCase.[
        .{
            title="runtime error in expr",
            stmt=Stmt.{Expression=ExpressionStmt.{
                expression=Expr.{
                    Unary=UnaryExpr.{
                        operator=Token.{type=TokenType.MINUS, lexeme="-"},
                        right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{String="foo"}}},
                    },
                },
            }},
            expected=RuntimeError.{token=Token.{type=TokenType.MINUS, lexeme="-"}, message="Operand must be a number."},
        },
        .{
            title="runtime error in block",
            stmt=Stmt.{Block=BlockStmt.{
                statements=to_pointer_list(Stmt.[
                    .{Expression=ExpressionStmt.{
                        expression=Expr.{
                            Unary=UnaryExpr.{
                                operator=Token.{type=TokenType.MINUS, lexeme="-"},
                                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{String="foo"}}},
                            },
                        },
                    }},
                ]),
            }},
            expected=RuntimeError.{token=Token.{type=TokenType.MINUS, lexeme="-"}, message="Operand must be a number."},
        },
    ];

    for tt: tests {
        interpreter := Interpreter.{};
        actual := interpreter->execute(tt.stmt);
        assert(actual->is_err(), tprintf("{}: must be an error", tt.title));
        e := actual->err()?;

        assert(e.message == tt.expected.message, tprintf("{}: \"{}\" != \"{}\"", tt.title, e.message, tt.expected.message));
        assert(e.token.type == tt.expected.token.type, tprintf("{}: \"{}\" != \"{}\"", tt.title, e.token.type, tt.expected.token.type));
    }
}

test_interpreter_interpret_error :: () => {
    TestCase :: struct {
        title: str;
        stmts: list.List(Stmt);
    }
    tests := TestCase.[
        .{
            title="runtime error in expr (-string)",
            stmts=to_list(Stmt.[
                .{Expression=ExpressionStmt.{
                    expression=Expr.{
                        Unary=UnaryExpr.{
                            operator=Token.{type=TokenType.MINUS, lexeme="-"},
                            right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{String="foo"}}},
                        },
                    },
                }},
            ]),
        },
        .{
            title="runtime error in expr (string + number)",
            stmts=to_list(Stmt.[
                .{Expression=ExpressionStmt.{
                    expression=Expr.{
                        Binary=BinaryExpr.{
                            left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{String="foo"}}},
                            operator=Token.{type=TokenType.PLUS, lexeme="+"},
                            right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=1}}},
                        },
                    },
                }},
            ]),
        },
    ];

    for tt: tests {
        interpreter := Interpreter.{};
        printf("debug: {}\n", tt.title);
        interpreter->interpret(&tt.stmts);
        assert(had_runtime_error, tprintf("{}: had_runtime_error must be true", tt.title));

        // NOTE: error must be reset for following tests!
        had_runtime_error = false;
    }
}

test_interpreter_stringify :: () {
    TestCase :: struct {
        title: str;
        obj: LoxObject;
        expected: str;
    }
    tests := TestCase.[
        .{
            title="string",
            obj=LoxObject.{String="foo"},
            expected="foo",
        },
        .{
            title="nil",
            obj=LoxObject.{Null=.{}},
            expected="nil",
        },
        .{
            title="bool",
            obj=LoxObject.{Bool=true},
            expected="true",
        },
        .{
            title="number (double)",
            obj=LoxObject.{Number=1.5},
            expected="1.5000",
        },
        .{
            title="number (int)",
            obj=LoxObject.{Number=1},
            expected="1",
        },
        .{
            title="built-in function",
            obj=LoxObject.{Callable=LoxCallable.{BuiltIn=BuiltInCallable.{}}},
            expected="<native fn>",
        },
    ];

    for tt: tests {
        interpreter := Interpreter.{};
        actual := interpreter->_stringify(tt.obj);
        assert(actual == tt.expected, tprintf("{}: \"{}\" != \"{}\"", tt.title, actual, tt.expected));
    }
}

main :: () {
    test_interpreter_evaluate();
    test_interpreter_evaluate_variable();
    test_interpreter_evaluate_assign();
    test_interpreter_evaluate_error();
    test_interpreter_execute_error();
    test_interpreter_interpret_error();
    test_interpreter_stringify();
}
