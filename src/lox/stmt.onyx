use core { Result }

Stmt :: union {
    Expression: ExpressionStmt;
    Print: PrintStmt;

    accept :: (stmt: Stmt, visitor: $T) -> Result(void, RuntimeError) where StmtVisitor(T) {
        switch stmt {
            case s: .Expression {
                return visitor->visit_expression_stmt(s);
            }
            case s: .Print {
                return visitor->visit_print_stmt(s);
            }
        }
    }
}

ExpressionStmt :: struct {
    expression: Expr;
}

PrintStmt :: struct {
    expression: Expr;
}

StmtVisitor :: interface (t: $T) {
    { t->visit_expression_stmt(ExpressionStmt.{}) } -> Result(void, RuntimeError);
    { t->visit_print_stmt(PrintStmt.{}) } -> Result(void, RuntimeError);
}
