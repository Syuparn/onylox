#load "./ast_printer"
#load "./expr"
#load "./token"
#load "./token_type"

use core { printf, tprintf }

test_ast_printer :: () => {
    TestCase :: struct {
        expr: Expr;
        expected: str;
    }
    tests := TestCase.[
        .{
            expr=Expr.{
                Literal=LiteralExpr.{value=TokenLiteral.{Number=123}},
            },
            expected="123.0000",
        },
        .{
            expr=Expr.{
                Literal=LiteralExpr.{value=TokenLiteral.{String="foo"}},
            },
            expected="\"foo\"",
        },
        .{
            expr=Expr.{
                Binary=BinaryExpr.{
                    left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=123}}},
                    operator=Token.{type=TokenType.PLUS, lexeme="+", literal=TokenLiteral.{Null=.{}}, line=1},
                    right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=456}}},
                },
            },
            expected="(+ 123.0000 456.0000)",
        },
        .{
            expr=Expr.{
                Group=GroupExpr.{
                    expression=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{String="foo"}}},
                },
            },
            expected="(group \"foo\")",
        },
        .{
            expr=Expr.{
                Unary=UnaryExpr.{
                    operator=Token.{type=TokenType.PLUS, lexeme="-", literal=TokenLiteral.{Null=.{}}, line=1},
                    right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=123}}},
                },
            },
            expected="(- 123.0000)",
        },
    ];

    for tt: tests {
        printer := ASTPrinter.{};
        obj := printer->print(tt.expr);
        actual := obj.String->unwrap();
        assert(actual == tt.expected, tprintf("\"{}\" != \"{}\"", actual, tt.expected));
    }
}

main :: () {
    test_ast_printer();
}
