#load "./token"
#load "./lox"

use core { printf, tprintf }
use core.list
use core.list { List }

Scanner :: struct {
    source: str;
    tokens: List(Token) = list.make(Token);
    start: u32 = 0;
    current: u32 = 0;
    line: u32 = 1;

    scan_tokens :: (s: &Scanner) -> List(Token) {
        while !s->_is_at_end() {
            s.start = s.current;
            s->_scan_token();
        }

        list.push_end(&s.tokens, Token.{type=TokenType.EOF, lexeme="", line=s.line});
        return s.tokens;
    }

    _scan_token :: (s: &Scanner) => {
        c := s->_advance();
        switch c {
            case '(' {
                s->_add_token(TokenType.LEFT_PAREN);
            }
            case ')' {
                s->_add_token(TokenType.RIGHT_PAREN);
            }
            case '{' {
                s->_add_token(TokenType.LEFT_BRACE);
            }
            case '}' {
                s->_add_token(TokenType.RIGHT_BRACE);
            }
            case ',' {
                s->_add_token(TokenType.COMMA);
            }
            case '.' {
                s->_add_token(TokenType.DOT);
            }
            case '-' {
                s->_add_token(TokenType.MINUS);
            }
            case '+' {
                s->_add_token(TokenType.PLUS);
            }
            case ';' {
                s->_add_token(TokenType.SEMICOLON);
            }
            case '*' {
                s->_add_token(TokenType.STAR);
            }
            case #default {
                Lox.error(s.line, tprintf("Unexpected character \"{}\".", c));
            }
        }
    }

    _is_at_end :: (s: &Scanner) -> bool {
        return s.current >= s.source.length;
    }

    _advance :: (s: &Scanner) -> u8 {
        current := s.current;
        s.current += 1;
        return s.source[current];
    }

    _add_token :: #match {
        (s: &Scanner, type: TokenType) {
            return s->_add_token(type, null);
        },
        (s: &Scanner, type: TokenType, literal: any) {
            text := s.source[s.start..s.current];
            list.push_end(&s.tokens, Token.{type=type, lexeme=text, literal=literal, line=s.line});
        },
    }
}
