#load "./token"

use core { printf }
use core.slice

Expr :: union {
    Binary: BinaryExpr;
    Literal: LiteralExpr;
    Group: GroupExpr;

    accept :: (expr: Expr, visitor: $T) -> LoxObject where Visitor(T) {
        switch expr {
            case e: .Binary {
                return visitor->visit_binary_expr(e);
            }
            case e: .Literal {
                return visitor->visit_literal_expr(e);
            }
            case e: .Group {
                return visitor->visit_group_expr(e);
            }
        }
    }
}

// NOTE: Expr should be a pointer, otherwise the struct initialization fails due to circular reference
BinaryExpr :: struct {
    left: &Expr;
    operator: Token;
    right: &Expr;
}

LiteralExpr :: struct {
    value: TokenLiteral;
}

GroupExpr :: struct {
    expression: &Expr;
}

Visitor :: interface (t: $T) {
    { t->visit_binary_expr(BinaryExpr.{}) } -> LoxObject;
    { t->visit_literal_expr(LiteralExpr.{}) } -> LoxObject;
    { t->visit_group_expr(GroupExpr.{}) } -> LoxObject;
}
