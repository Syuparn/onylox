#load "./hash"
#load "./runtime_error"
#load "./token"

use core { printf, Result }
use core.list
use core.slice

Expr :: union {
    Literal: LiteralExpr;
    Logical: LogicalExpr;
    Binary: BinaryExpr;
    Unary: UnaryExpr;
    Group: GroupExpr;
    Variable: VariableExpr;
    Assign: AssignExpr;
    Call: CallExpr;
    Get: GetExpr;
    Set: SetExpr;

    accept :: (expr: Expr, visitor: $T) -> Result(LoxObject, RuntimeError) where Visitor(T) {
        switch expr {
            case .Literal as e {
                return visitor->visit_literal_expr(e);
            }
            case .Logical as e {
                return visitor->visit_logical_expr(e);
            }
            case .Binary as e {
                return visitor->visit_binary_expr(e);
            }
            case .Unary as e {
                return visitor->visit_unary_expr(e);
            }
            case .Group as e {
                return visitor->visit_group_expr(e);
            }
            case .Variable as e {
                return visitor->visit_variable_expr(e);
            }
            case .Assign as e {
                return visitor->visit_assign_expr(e);
            }
            case .Call as e {
                return visitor->visit_call_expr(e);
            }
            case .Get as e {
                return visitor->visit_get_expr(e);
            }
            case .Set as e {
                return visitor->visit_set_expr(e);
            }
        }
    }

    hash :: (expr: Expr) -> u32 {
        switch expr {
            case .Literal as e {
                return e._hash;
            }
            case .Logical as e {
                return e._hash;
            }
            case .Binary as e {
                return e._hash;
            }
            case .Unary as e {
                return e._hash;
            }
            case .Group as e {
                return e._hash;
            }
            case .Variable as e {
                return e._hash;
            }
            case .Assign as e {
                return e._hash;
            }
            case .Call as e {
                return e._hash;
            }
            case .Get as e {
                return e._hash;
            }
            case .Set as e {
                return e._hash;
            }
        }
    }
}

#operator == (expr1: Expr, expr2: Expr) -> bool {
    // NOTE: exprs should be compared by identity (not equivalence), otherwise equivalent expr in different place are mistaken by resolver
    return expr1->hash() == expr2->hash();
}

// NOTE: Expr should be a pointer, otherwise the struct initialization fails due to circular reference
BinaryExpr :: struct {
    left: &Expr;
    operator: Token;
    right: &Expr;
    _hash: u32 = new_hash();
}

UnaryExpr :: struct {
    operator: Token;
    right: &Expr;
    _hash: u32 = new_hash();
}

LiteralExpr :: struct {
    value: TokenLiteral;
    _hash: u32 = new_hash();
}

GroupExpr :: struct {
    expression: &Expr;
    _hash: u32 = new_hash();
}

VariableExpr :: struct {
    name: Token;
    _hash: u32 = new_hash();
}

AssignExpr :: struct {
    name: Token;
    value: &Expr;
    _hash: u32 = new_hash();
}

LogicalExpr :: struct {
    left: &Expr;
    operator: Token;
    right: &Expr;
    _hash: u32 = new_hash();
}

CallExpr :: struct {
    callee: &Expr;
    paren: Token;
    arguments: list.List(&Expr);
    _hash: u32 = new_hash();
}

GetExpr :: struct {
    object: &Expr;
    name: Token;
    _hash: u32 = new_hash();
}

SetExpr :: struct {
    object: &Expr;
    name: Token;
    value: &Expr;
    _hash: u32 = new_hash();
}

Visitor :: interface (T: type_expr) {
    t as T;

    { t->visit_literal_expr(LiteralExpr.{}) } -> Result(LoxObject, RuntimeError);
    { t->visit_logical_expr(LogicalExpr.{}) } -> Result(LoxObject, RuntimeError);
    { t->visit_binary_expr(BinaryExpr.{}) } -> Result(LoxObject, RuntimeError);
    { t->visit_unary_expr(UnaryExpr.{}) } -> Result(LoxObject, RuntimeError);
    { t->visit_group_expr(GroupExpr.{}) } -> Result(LoxObject, RuntimeError);
    { t->visit_variable_expr(VariableExpr.{}) } -> Result(LoxObject, RuntimeError);
    { t->visit_assign_expr(AssignExpr.{}) } -> Result(LoxObject, RuntimeError);
    { t->visit_call_expr(CallExpr.{}) } -> Result(LoxObject, RuntimeError);
    { t->visit_get_expr(GetExpr.{}) } -> Result(LoxObject, RuntimeError);
    { t->visit_set_expr(SetExpr.{}) } -> Result(LoxObject, RuntimeError);
}
