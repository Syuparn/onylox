#load "./ast_printer"
#load "./expr"
#load "./token"
#load "./token_type"

use core { printf, tprintf }

test_ast_printer :: () => {
    TestCase :: struct {
        expr: Expr;
        expected: str;
    }
    tests := TestCase.[
        .{
            expr=Expr.{
                Literal=LiteralExpr.{value=TokenLiteral.{Number=123}},
            },
            expected="123.0000",
        },
        .{
            expr=Expr.{
                Literal=LiteralExpr.{value=TokenLiteral.{String="foo"}},
            },
            expected="\"foo\"",
        },
        .{
            expr=Expr.{
                Binary=BinaryExpr.{
                    left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=123}}},
                    operator=Token.{type=TokenType.PLUS, lexeme="+", literal=TokenLiteral.{Null=.{}}, line=1},
                    right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=456}}},
                },
            },
            expected="(+ 123.0000 456.0000)",
        },
        .{
            expr=Expr.{
                Logical=LogicalExpr.{
                    left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=123}}},
                    operator=Token.{type=TokenType.OR, lexeme="or", literal=TokenLiteral.{Null=.{}}, line=1},
                    right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=456}}},
                },
            },
            expected="(or 123.0000 456.0000)",
        },
        .{
            expr=Expr.{
                Group=GroupExpr.{
                    expression=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{String="foo"}}},
                },
            },
            expected="(group \"foo\")",
        },
        .{
            expr=Expr.{
                Get=GetExpr.{
                    object=&Expr.{
                        Variable=VariableExpr.{
                            name=Token.{type=TokenType.IDENTIFIER, lexeme="foo", line=1},
                        },
                    },
                    name=Token.{type=TokenType.IDENTIFIER, lexeme="prop", literal=TokenLiteral.{Null=.{}}, line=1},
                },
            },
            expected="(get (var foo) prop)",
        },
        .{
            expr=Expr.{
                Set=SetExpr.{
                    object=&Expr.{
                        Variable=VariableExpr.{
                            name=Token.{type=TokenType.IDENTIFIER, lexeme="foo", line=1},
                        },
                    },
                    name=Token.{type=TokenType.IDENTIFIER, lexeme="prop", literal=TokenLiteral.{Null=.{}}, line=1},
                    value=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=123}}},
                },
            },
            expected="(set (var foo) prop 123.0000)",
        },
        .{
            expr=Expr.{
                Unary=UnaryExpr.{
                    operator=Token.{type=TokenType.MINUS, lexeme="-", literal=TokenLiteral.{Null=.{}}, line=1},
                    right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=123}}},
                },
            },
            expected="(- 123.0000)",
        },
        .{
            expr=Expr.{
                Variable=VariableExpr.{
                    name=Token.{type=TokenType.IDENTIFIER, lexeme="foo", line=1},
                },
            },
            expected="(var foo)",
        },
        .{
            expr=Expr.{
                Assign=AssignExpr.{
                    name=Token.{type=TokenType.IDENTIFIER, lexeme="foo", line=1},
                    value=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=123}}},
                },
            },
            expected="(= foo 123.0000)",
        },
        .{
            expr=Expr.{
                Assign=AssignExpr.{
                    name=Token.{type=TokenType.IDENTIFIER, lexeme="foo", line=1},
                    value=&Expr.{
                        Assign=AssignExpr.{
                            name=Token.{type=TokenType.IDENTIFIER, lexeme="bar", line=1},
                            value=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=123}}},
                        },
                    },
                },
            },
            expected="(= foo (= bar 123.0000))",
        },
        .{
            expr=Expr.{
                Call=CallExpr.{
                    callee=&Expr.{
                        Variable=VariableExpr.{
                            name=Token.{type=TokenType.IDENTIFIER, lexeme="foo", line=1},
                        },
                    },
                    paren=Token.{type=TokenType.RIGHT_PAREN, lexeme=")", line=1},
                    arguments=to_pointer_list(Expr.[]),
                },
            },
            expected="(call (var foo))",
        },
        .{
            expr=Expr.{
                Call=CallExpr.{
                    callee=&Expr.{
                        Variable=VariableExpr.{
                            name=Token.{type=TokenType.IDENTIFIER, lexeme="foo", line=1},
                        },
                    },
                    paren=Token.{type=TokenType.RIGHT_PAREN, lexeme=")", line=1},
                    arguments=to_pointer_list(Expr.[
                        Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=123}}},
                    ]),
                },
            },
            expected="(call (var foo) 123.0000)",
        },
        .{
            expr=Expr.{
                Call=CallExpr.{
                    callee=&Expr.{
                        Variable=VariableExpr.{
                            name=Token.{type=TokenType.IDENTIFIER, lexeme="foo", line=1},
                        },
                    },
                    paren=Token.{type=TokenType.RIGHT_PAREN, lexeme=")", line=1},
                    arguments=to_pointer_list(Expr.[
                        Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=123}}},
                        Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=456}}},
                    ]),
                },
            },
            expected="(call (var foo) 123.0000 456.0000)",
        },
        // avoid null pointer dereference
        .{
            expr=Expr.{
                Unary=UnaryExpr.{
                    operator=Token.{type=TokenType.PLUS, lexeme="-", literal=TokenLiteral.{Null=.{}}, line=1},
                    right=null,
                },
            },
            expected="(- <null Expr (should be Onylox bug)>)",
        },
        .{
            expr=Expr.{
                Binary=BinaryExpr.{
                    left=null,
                    operator=Token.{type=TokenType.PLUS, lexeme="+", literal=TokenLiteral.{Null=.{}}, line=1},
                    right=null,
                },
            },
            expected="(+ <null Expr (should be Onylox bug)> <null Expr (should be Onylox bug)>)",
        },
    ];

    for tt in tests {
        printer := ASTPrinter.{};

        result := printer->print(tt.expr);
        obj := result->expect(tprintf("{}: must not be an error: {}\n", tt.expected, result->err()));
        actual := obj.String->unwrap();
        assert(actual == tt.expected, tprintf("\"{}\" != \"{}\"", actual, tt.expected));
    }
}

main :: () {
    test_ast_printer();
}
