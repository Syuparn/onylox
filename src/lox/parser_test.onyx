#load "./ast_printer"
#load "./parser"
#load "./util"

use core { printf, tprintf }
use core.iter
use core.list

print_expr :: (expr: Expr) -> str {
    printer := ASTPrinter.{};
    obj := printer->print(expr)->ok()?; // must be ok
    return obj.String?;
}

test_parser_parse_expr :: () => {
    TestCase :: struct {
        title: str;
        tokens: list.List(Token);
        // HACK: to make test simple, define only an expr in the first statement
        expected: Expr;
    }
    tests := TestCase.[
        .{
            title="parse number literal",
            tokens=_to_list(Token.[
                Token.{type=TokenType.NUMBER, lexeme="123", literal=TokenLiteral.{Number=123}},
                Token.{type=TokenType.SEMICOLON, lexeme=";"},
                Token.{type=TokenType.EOF, lexeme=""},
            ]),
            expected=Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=123}}},
        },
        .{
            title="parse string literal",
            tokens=_to_list(Token.[
                Token.{type=TokenType.STRING, lexeme="\"foo\"", literal=TokenLiteral.{String="foo"}},
                Token.{type=TokenType.SEMICOLON, lexeme=";"},
                Token.{type=TokenType.EOF, lexeme=""},
            ]),
            expected=Expr.{Literal=LiteralExpr.{value=TokenLiteral.{String="foo"}}},
        },
        .{
            title="parse true literal",
            tokens=_to_list(Token.[
                Token.{type=TokenType.TRUE, lexeme="true", literal=TokenLiteral.{Bool=true}},
                Token.{type=TokenType.SEMICOLON, lexeme=";"},
                Token.{type=TokenType.EOF, lexeme=""},
            ]),
            expected=Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Bool=true}}},
        },
        .{
            title="parse false literal",
            tokens=_to_list(Token.[
                Token.{type=TokenType.FALSE, lexeme="false", literal=TokenLiteral.{Bool=false}},
                Token.{type=TokenType.SEMICOLON, lexeme=";"},
                Token.{type=TokenType.EOF, lexeme=""},
            ]),
            expected=Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Bool=false}}},
        },
        .{
            title="parse nil literal",
            tokens=_to_list(Token.[
                Token.{type=TokenType.NIL, lexeme="nil", literal=TokenLiteral.{Null=.{}}},
                Token.{type=TokenType.SEMICOLON, lexeme=";"},
                Token.{type=TokenType.EOF, lexeme=""},
            ]),
            expected=Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Null=.{}}}},
        },
        .{
            title="parse group",
            tokens=_to_list(Token.[
                Token.{type=TokenType.LEFT_PAREN, lexeme="("},
                Token.{type=TokenType.NIL, lexeme="nil", literal=TokenLiteral.{Null=.{}}},
                Token.{type=TokenType.RIGHT_PAREN, lexeme=")"},
                Token.{type=TokenType.SEMICOLON, lexeme=";"},
                Token.{type=TokenType.EOF, lexeme=""},
            ]),
            expected=Expr.{Group=GroupExpr.{
                expression=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Null=.{}}}},
            }},
        },
        .{
            title="parse unary",
            tokens=_to_list(Token.[
                Token.{type=TokenType.MINUS, lexeme="-"},
                Token.{type=TokenType.NUMBER, lexeme="123", literal=TokenLiteral.{Number=123}},
                Token.{type=TokenType.SEMICOLON, lexeme=";"},
                Token.{type=TokenType.EOF, lexeme=""},
            ]),
            expected=Expr.{Unary=UnaryExpr.{
                operator=Token.{type=TokenType.MINUS, lexeme="-"},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=123}}},
            }},
        },
        .{
            title="parse factor",
            tokens=_to_list(Token.[
                Token.{type=TokenType.NUMBER, lexeme="123", literal=TokenLiteral.{Number=123}},
                Token.{type=TokenType.STAR, lexeme="*"},
                Token.{type=TokenType.NUMBER, lexeme="456", literal=TokenLiteral.{Number=456}},
                Token.{type=TokenType.SEMICOLON, lexeme=";"},
                Token.{type=TokenType.EOF, lexeme=""},
            ]),
            expected=Expr.{Binary=BinaryExpr.{
                left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=123}}},
                operator=Token.{type=TokenType.STAR, lexeme="*"},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=456}}},
            }},
        },
        .{
            title="parse term",
            tokens=_to_list(Token.[
                Token.{type=TokenType.NUMBER, lexeme="123", literal=TokenLiteral.{Number=123}},
                Token.{type=TokenType.MINUS, lexeme="-"},
                Token.{type=TokenType.NUMBER, lexeme="456", literal=TokenLiteral.{Number=456}},
                Token.{type=TokenType.SEMICOLON, lexeme=";"},
                Token.{type=TokenType.EOF, lexeme=""},
            ]),
            expected=Expr.{Binary=BinaryExpr.{
                left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=123}}},
                operator=Token.{type=TokenType.MINUS, lexeme="-"},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=456}}},
            }},
        },
        .{
            title="parse comparison",
            tokens=_to_list(Token.[
                Token.{type=TokenType.NUMBER, lexeme="123", literal=TokenLiteral.{Number=123}},
                Token.{type=TokenType.LESS_EQUAL, lexeme="<="},
                Token.{type=TokenType.NUMBER, lexeme="456", literal=TokenLiteral.{Number=456}},
                Token.{type=TokenType.SEMICOLON, lexeme=";"},
                Token.{type=TokenType.EOF, lexeme=""},
            ]),
            expected=Expr.{Binary=BinaryExpr.{
                left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=123}}},
                operator=Token.{type=TokenType.LESS_EQUAL, lexeme="<="},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=456}}},
            }},
        },
        .{
            title="parse equality",
            tokens=_to_list(Token.[
                Token.{type=TokenType.NUMBER, lexeme="123", literal=TokenLiteral.{Number=123}},
                Token.{type=TokenType.EQUAL_EQUAL, lexeme="=="},
                Token.{type=TokenType.NUMBER, lexeme="456", literal=TokenLiteral.{Number=456}},
                Token.{type=TokenType.SEMICOLON, lexeme=";"},
                Token.{type=TokenType.EOF, lexeme=""},
            ]),
            expected=Expr.{Binary=BinaryExpr.{
                left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=123}}},
                operator=Token.{type=TokenType.EQUAL_EQUAL, lexeme="=="},
                right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=456}}},
            }},
        },
        .{
            title="precedence (unary vs factor)",
            tokens=_to_list(Token.[
                Token.{type=TokenType.NUMBER, lexeme="123", literal=TokenLiteral.{Number=123}},
                Token.{type=TokenType.STAR, lexeme="*"},
                Token.{type=TokenType.MINUS, lexeme="-"},
                Token.{type=TokenType.NUMBER, lexeme="456", literal=TokenLiteral.{Number=456}},
                Token.{type=TokenType.SEMICOLON, lexeme=";"},
                Token.{type=TokenType.EOF, lexeme=""},
            ]),
            expected=Expr.{Binary=BinaryExpr.{
                left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=123}}},
                operator=Token.{type=TokenType.STAR, lexeme="*"},
                right=&Expr.{Unary=UnaryExpr.{
                    operator=Token.{type=TokenType.MINUS, lexeme="-"},
                    right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=456}}},
                }},
            }},
        },
        .{
            title="precedence (factor vs term)",
            tokens=_to_list(Token.[
                Token.{type=TokenType.NUMBER, lexeme="1", literal=TokenLiteral.{Number=1}},
                Token.{type=TokenType.PLUS, lexeme="+"},
                Token.{type=TokenType.NUMBER, lexeme="2", literal=TokenLiteral.{Number=2}},
                Token.{type=TokenType.STAR, lexeme="*"},
                Token.{type=TokenType.NUMBER, lexeme="3", literal=TokenLiteral.{Number=3}},
                Token.{type=TokenType.SEMICOLON, lexeme=";"},
                Token.{type=TokenType.EOF, lexeme=""},
            ]),
            expected=Expr.{Binary=BinaryExpr.{
                left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=1}}},
                operator=Token.{type=TokenType.PLUS, lexeme="+"},
                right=&Expr.{Binary=BinaryExpr.{
                    left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=2}}},
                    operator=Token.{type=TokenType.STAR, lexeme="*"},
                    right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=3}}},
                }},
            }},
        },
        .{
            title="precedence (comparison vs factor)",
            tokens=_to_list(Token.[
                Token.{type=TokenType.NUMBER, lexeme="1", literal=TokenLiteral.{Number=1}},
                Token.{type=TokenType.LESS, lexeme="<"},
                Token.{type=TokenType.NUMBER, lexeme="2", literal=TokenLiteral.{Number=2}},
                Token.{type=TokenType.PLUS, lexeme="+"},
                Token.{type=TokenType.NUMBER, lexeme="3", literal=TokenLiteral.{Number=3}},
                Token.{type=TokenType.SEMICOLON, lexeme=";"},
                Token.{type=TokenType.EOF, lexeme=""},
            ]),
            expected=Expr.{Binary=BinaryExpr.{
                left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=1}}},
                operator=Token.{type=TokenType.LESS, lexeme="<"},
                right=&Expr.{Binary=BinaryExpr.{
                    left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=2}}},
                    operator=Token.{type=TokenType.PLUS, lexeme="+"},
                    right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=3}}},
                }},
            }},
        },
        .{
            title="precedence (equality vs comparison)",
            tokens=_to_list(Token.[
                Token.{type=TokenType.NUMBER, lexeme="1", literal=TokenLiteral.{Number=1}},
                Token.{type=TokenType.BANG_EQUAL, lexeme="!="},
                Token.{type=TokenType.NUMBER, lexeme="2", literal=TokenLiteral.{Number=2}},
                Token.{type=TokenType.GREATER, lexeme=">"},
                Token.{type=TokenType.NUMBER, lexeme="3", literal=TokenLiteral.{Number=3}},
                Token.{type=TokenType.SEMICOLON, lexeme=";"},
                Token.{type=TokenType.EOF, lexeme=""},
            ]),
            expected=Expr.{Binary=BinaryExpr.{
                left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=1}}},
                operator=Token.{type=TokenType.BANG_EQUAL, lexeme="!="},
                right=&Expr.{Binary=BinaryExpr.{
                    left=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=2}}},
                    operator=Token.{type=TokenType.GREATER, lexeme=">"},
                    right=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=3}}},
                }},
            }},
        },
        .{
            title="parse variable",
            tokens=_to_list(Token.[
                Token.{type=TokenType.IDENTIFIER, lexeme="foo"},
                Token.{type=TokenType.SEMICOLON, lexeme=";"},
                Token.{type=TokenType.EOF, lexeme=""},
            ]),
            expected=Expr.{Variable=VariableExpr.{
                name=Token.{type=TokenType.IDENTIFIER, lexeme="foo"},
            }},
        },
        .{
            title="parse assignment",
            tokens=_to_list(Token.[
                Token.{type=TokenType.IDENTIFIER, lexeme="foo"},
                Token.{type=TokenType.EQUAL, lexeme="="},
                Token.{type=TokenType.NUMBER, lexeme="2", literal=TokenLiteral.{Number=2}},
                Token.{type=TokenType.SEMICOLON, lexeme=";"},
                Token.{type=TokenType.EOF, lexeme=""},
            ]),
            expected=Expr.{Assign=AssignExpr.{
                name=Token.{type=TokenType.IDENTIFIER, lexeme="foo"},
                value=&Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Number=2}}},
            }},
        },
    ];

    for tt: tests {
        parser := Parser.{tokens=tt.tokens};
        ast := parser->parse()->expect(tprintf("{}: expr must not be empty", tt.title));

        assert(ast->count() == 1, tprintf("{}: length: {} != 1", tt.title, ast->count()));
        stmt := ast->at(0);
        actual := stmt.Expression->expect(tprintf("{}: stmt must be ExpressionStmt: {}", tt.title, stmt)).expression;

        // HACK: converted to string because == is not defined for Expr
        assert(
            print_expr(actual) == print_expr(tt.expected),
            tprintf("{}: \"{}\" != \"{}\"", tt.title, print_expr(actual), print_expr(tt.expected)),
        );

        parser->free();
    }
}

test_parser_parse_error :: () => {
    TestCase :: struct {
        title: str;
        tokens: list.List(Token);
    }
    tests := TestCase.[
        .{
            title="no right paren",
            tokens=_to_list(Token.[
                Token.{type=TokenType.LEFT_PAREN, lexeme="("},
                Token.{type=TokenType.NUMBER, lexeme="1", literal=TokenLiteral.{Number=1}},
                Token.{type=TokenType.SEMICOLON, lexeme=";"},
                Token.{type=TokenType.EOF, lexeme=""},
            ]),
        },
        .{
            title="no right paren (binary)",
            tokens=_to_list(Token.[
                Token.{type=TokenType.LEFT_PAREN, lexeme="("},
                Token.{type=TokenType.NUMBER, lexeme="1", literal=TokenLiteral.{Number=1}},
                Token.{type=TokenType.GREATER, lexeme=">"},
                Token.{type=TokenType.NUMBER, lexeme="2", literal=TokenLiteral.{Number=2}},
                Token.{type=TokenType.SEMICOLON, lexeme=";"},
                Token.{type=TokenType.EOF, lexeme=""},
            ]),
        },
        .{
            title="invalid assignment",
            tokens=_to_list(Token.[
                Token.{type=TokenType.IDENTIFIER, lexeme="a"},
                Token.{type=TokenType.PLUS, lexeme="+"},
                Token.{type=TokenType.IDENTIFIER, lexeme="b"},
                Token.{type=TokenType.EQUAL, lexeme="="},
                Token.{type=TokenType.NUMBER, lexeme="10", literal=TokenLiteral.{Number=10}},
                Token.{type=TokenType.SEMICOLON, lexeme=";"},
                Token.{type=TokenType.EOF, lexeme=""},
            ]),
        },
        .{
            title="empty expression",
            tokens=_to_list(Token.[
                Token.{type=TokenType.SEMICOLON, lexeme=";"},
                Token.{type=TokenType.EOF, lexeme=""},
            ]),
        },
        .{
            title="no semicolon in expressionstmt",
            tokens=_to_list(Token.[
                Token.{type=TokenType.NUMBER, lexeme="1", literal=TokenLiteral.{Number=1}},
                Token.{type=TokenType.EOF, lexeme=""},
            ]),
        },
        .{
            title="no semicolon in printstmt",
            tokens=_to_list(Token.[
                Token.{type=TokenType.PRINT, lexeme="print"},
                Token.{type=TokenType.NUMBER, lexeme="1", literal=TokenLiteral.{Number=1}},
                Token.{type=TokenType.EOF, lexeme=""},
            ]),
        },
        .{
            title="unterminated binary expr",
            tokens=_to_list(Token.[
                Token.{type=TokenType.NUMBER, lexeme="1", literal=TokenLiteral.{Number=1}},
                Token.{type=TokenType.PLUS, lexeme="+"},
                Token.{type=TokenType.SEMICOLON, lexeme=";"},
                Token.{type=TokenType.EOF, lexeme=""},
            ]),
        },
        .{
            title="var with non-identifier",
            tokens=_to_list(Token.[
                Token.{type=TokenType.VAR, lexeme="var"},
                Token.{type=TokenType.NUMBER, lexeme="1", literal=TokenLiteral.{Number=1}},
                Token.{type=TokenType.SEMICOLON, lexeme=";"},
                Token.{type=TokenType.EOF, lexeme=""},
            ]),
        },
        .{
            title="no semicolon in varstmt",
            tokens=_to_list(Token.[
                Token.{type=TokenType.VAR, lexeme="var"},
                Token.{type=TokenType.IDENTIFIER, lexeme="foo"},
                Token.{type=TokenType.EOF, lexeme=""},
            ]),
        },
    ];

    for tt: tests {
        parser := Parser.{tokens=tt.tokens};

        printf("debug: {}\n", tt.title);
        actual := parser->parse();
        assert(had_error, tprintf("{}: error must be raised", tt.title));

        parser->free();

        // NOTE: error must be reset for following tests!
        had_error = false;
    }
}

main :: () {
    test_parser_parse_expr();
    test_parser_parse_error();
}
