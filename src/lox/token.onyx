#load "./token_type"

use core { tprintf }
use core.conv

Token :: struct {
    type: TokenType;
    lexeme: str;
    literal: TokenLiteral;
    line: u32;
}

TokenLiteral :: union {
    String: str;
    Number: f64;
    Bool: bool;
    Null: void;
}

#operator == (l1, l2: TokenLiteral) -> bool {
    switch l1 {
        case .String as s1 {
            switch l2 {
                case .String as s2 {
                    return s1 == s2;
                }
                case #default {
                    return false;
                }
            }
        }
        case .Number as n1 {
            switch l2 {
                case .Number as n2 {
                    return n1 == n2;
                }
                case #default {
                    return false;
                }
            }
        }
        case .Bool as b1 {
            switch l2 {
                case .Bool as b2 {
                    return b1 == b2;
                }
                case #default {
                    return false;
                }
            }
        }
        case .Null as _n1 {
            switch l2 {
                case .Null as _n2 {
                    return true;
                }
                case #default {
                    return false;
                }
            }
        }
        case #default {
            return false;
        }
    }
}

// define format for printf
@conv.Custom_Format_Proc.{ Token }
(output: &conv.Format_Output, format: &conv.Format, token: &Token) {
    conv.format(output, "{} {} {}", token.type, token.lexeme, token.literal);
}
