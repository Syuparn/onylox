#load "./token"
#load "./token_type"

use core { tprintf }
use core.iter

test_token_to_string :: () => {
    TestCase :: struct {
        token: Token;
        expected: str;
    }
    tests := TestCase.[
        .{token=Token.{type=TokenType.AND, lexeme="&", literal=TokenLiteral.{Null=.{}}, line=1}, expected="AND & Null"},
        .{token=Token.{type=TokenType.STRING, lexeme="\"foo\"", literal=TokenLiteral.{String="foo"}, line=1}, expected="STRING \"foo\" String(\"foo\")"},
    ];

    for tt: tests {
        assert(tprintf("{}", tt.token) == tt.expected, tprintf("\"{}\" != \"{}\"", tprintf("{}", tt.token), tt.expected));
    }
}


main :: () {
    test_token_to_string();
}
