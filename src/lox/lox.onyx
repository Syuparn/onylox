use core { __flush_stdio, printf, tprintf }
use core.string

#load "./ast_printer"
#load "./interpreter"
#load "./options"
#load "./parser"
#load "./resolver"
#load "./scanner"

had_error := false;
had_runtime_error := false;

Lox :: struct {
    interpreter: Interpreter = new_interpreter();

    run :: (l: &Lox, source: str) => {
        scanner := &Scanner.{source=source};
        tokens := scanner->scan_tokens();

        parser := &Parser.{tokens=tokens};
        // NOTE: ? cannot be used here, otherwise exit code is not set!
        result := parser->parse();

        if had_error {
            return .{};
        }
        stmts := result?;

        resolver := Resolver.{interpreter=&l.interpreter};
        r := resolver->resolve(stmts);
        if r->is_err() {
            err := r->err()?;
            Lox.error(err.token, err.message);
            return .{};
        }

        l.interpreter->interpret(&stmts);
    }

    error :: #match {
        (line: u32, message: str) {
            Lox._report(line, "", message);
        },
        (token: Token, message: str) {
            if token.type == TokenType.EOF {
                Lox._report(token.line, "at end", message);
            } else {
                Lox._report(token.line, tprintf("at '{}'", token.lexeme), message);
            }
        }
    }

    runtime_error :: (token: Token, message: str) {
        printf("{}\n[line {}]\n", message, token.line);
        had_runtime_error = true;

    }

    _report :: (line: u32, where_: str, message: str) {
        printf("[line {}] Error {}: {}\n", line, where_, message);
        had_error = true;
    }
}
