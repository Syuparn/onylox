#load "./object"
#load "./runtime_error"
#load "./token"

use core { Result, tprintf }
use core.map

Environment :: struct {
    value: Map(str, LoxObject) = map.literal(str, LoxObject, .[]);

    define :: (e: Environment, name: str, value: LoxObject) => {
        e.value->put(name, value);
    }

    get :: (e: Environment, name: Token) -> Result(LoxObject, RuntimeError) {
        if e.value->has(name.lexeme) {
            return .{Ok=e.value->get(name.lexeme)?};
        }

        // NOTE: this should be runtime error, otherwise functions cannot call each other
        return .{Err=RuntimeError.{token=name, message=tprintf("Undefined varible '{}'.", name.lexeme)}};
    }

    // HACK: returned LoxObject is not used (it is only defined for forward_err() method)
    assign :: (e: Environment, name: Token, value: LoxObject) -> Result(LoxObject, RuntimeError) {
        if e.value->has(name.lexeme) {
            e.value->put(name.lexeme, value);
            return .{Ok=.{}};
        }

        return .{Err=RuntimeError.{token=name, message=tprintf("Undefined varible '{}'.", name.lexeme)}};
    }
}
