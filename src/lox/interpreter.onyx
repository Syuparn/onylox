#load "./environment"
#load "./expr"
#load "./lox"
#load "./object"
#load "./runtime_error"
#load "./stmt"
#load "./util"

use core
use core { printf, println, Result, tprintf }
use core.list
use core.map
use core.string

new_interpreter :: () -> Interpreter {
    globals := Interpreter._globals();
    // TODO: free it
    global_ptr := context.allocator->move(globals);

    return Interpreter.{
        environment=globals,
        globals=global_ptr,
        locals=map.literal(Expr, u32, .[]),
    };
}

Interpreter :: struct {
    environment: Environment;
    globals: &Environment;
    locals: Map(Expr, u32);

    interpret :: (interpreter: &Interpreter, stmts: &list.List(Stmt)) => {
        for stmt: stmts->as_iter() {
            result := interpreter->execute(stmt);
            if result->is_err() {
                err := result->err()?;
                Lox.runtime_error(err.token, err.message);
                return .{};
            }
        }
    }

    execute :: (interpreter: &Interpreter, stmt: Stmt) -> Result(void, RuntimeError) {
        return stmt->accept(interpreter);
    }

    resolve :: (interpreter: &Interpreter, expr: Expr, depth: u32) => {
        interpreter.locals->put(expr, depth);
    }

    execute_block :: (interpreter: &Interpreter, statements: list.List(&Stmt), environment: Environment) -> Result(void, RuntimeError) {
        previous := interpreter.environment;
        defer interpreter.environment = previous;

        interpreter.environment = environment;

        // NOTE: List#as_iter and List#count cannot be called from List($T) due to type mismatch
        for i: 0 .. list_count(&Stmt, statements) {
            stmts := statements;
            statement := *((&stmts)->at(i));
            result := interpreter->execute(*statement);
            if result->is_err() {
                return result;
            }
        }

        return .{Ok=.{}};
    }

    evaluate :: (interpreter: &Interpreter, expr: Expr) -> Result(LoxObject, RuntimeError) {
        return expr->accept(interpreter);
    }

    visit_if_stmt :: (interpreter: &Interpreter, stmt: IfStmt) -> Result(void, RuntimeError) {
        cond_result := interpreter->evaluate(stmt.condition);
        // NOTE: forward_err cannot be used because returned type is different
        if cond_result->is_err() {
            return .{Err=cond_result->err()?};
        }
        cond := cond_result->ok()?;

        if interpreter->_is_truthy(cond) {
            return interpreter->execute(*stmt.then_branch);
        } else {
            return interpreter->execute(*stmt.else_branch);
        }
    }

    visit_expression_stmt :: (interpreter: &Interpreter, stmt: ExpressionStmt) -> Result(void, RuntimeError) {
        result := interpreter->evaluate(stmt.expression);
        // NOTE: forward_err cannot be used because returned type is different
        if result->is_err() {
            return .{Err=result->err()?};
        }
        return .{Ok=.{}};
    }

    visit_print_stmt :: (interpreter: &Interpreter, stmt: PrintStmt) -> Result(void, RuntimeError) {
        result := interpreter->evaluate(stmt.expression);
        // NOTE: forward_err cannot be used because returned type is different
        if result->is_err() {
            return .{Err=result->err()?};
        }
        value := result->ok()?;

        println(interpreter->_stringify(value));
        return .{Ok=.{}};
    }

    visit_return_stmt :: (interpreter: &Interpreter, stmt: ReturnStmt) -> Result(void, RuntimeError) {
        value := LoxObject.{Null=.{}};
        if !is_empty(stmt.value) {
            result := interpreter->evaluate(stmt.value?);
            if result->is_err() {
                return .{Err=result->err()?};
            }
            value = result->ok()?;
        }

        // HACK: use error to jump to where callee is evaluated
        return .{Err=RuntimeError.{value=Optional.make(value)}};
    }

    visit_var_stmt :: (interpreter: &Interpreter, stmt: VarStmt) -> Result(void, RuntimeError) {
        value := LoxObject.{Null=.{}};
        if !is_empty(stmt.initializer) {
            value = interpreter->evaluate(stmt.initializer?)->forward_err();
        }

        interpreter.environment->define(stmt.name.lexeme, value);
        return .{Ok=.{}};
    }

    visit_block_stmt :: (interpreter: &Interpreter, stmt: BlockStmt) -> Result(void, RuntimeError) {
        // TODO: free unused environment
        env_ptr := context.allocator->move(interpreter.environment);
        return interpreter->execute_block(stmt.statements, Environment.{enclosing=env_ptr});
    }

    visit_while_stmt :: (interpreter: &Interpreter, stmt: WhileStmt) -> Result(void, RuntimeError) {
        while true {
            // NOTE: this must be inside loop! (cond expr should be re-evaluated in each iteration)
            cond_result := interpreter->evaluate(stmt.condition);
            if cond_result->is_err() {
                return .{Err=cond_result->err()?};
            }
            cond := cond_result->ok()?;

            if !interpreter->_is_truthy(cond) {
                break;
            }

            // forward_err cannot be used here??
            result := interpreter->execute(*stmt.body);
            if result->is_err() {
                return .{Err=result->err()?};
            }
        }

        return .{Ok=.{}};
    }

    visit_function_stmt :: (interpreter: &Interpreter, stmt: FunctionStmt) -> Result(void, RuntimeError) {
        // TODO: free unused environment
        env_ptr := context.allocator->move(interpreter.environment);

        // NOTE: Since Lox has lexical scopes, environment should be set when function is declared.
        function := LoxObject.{Callable=LoxCallable.{Function=LoxFunction.{declaration=stmt, closure=env_ptr}}};
        interpreter.environment->define(stmt.name.lexeme, function);
        return .{Ok=.{}};
    }

    visit_assign_expr :: (interpreter: &Interpreter, expr: AssignExpr) -> Result(LoxObject, RuntimeError) {
        value := interpreter->evaluate(*expr.value)->forward_err();

        distance := interpreter.locals->get(Expr.{Assign=expr});
        if !is_empty(distance) {
            result := interpreter.environment->assign_at(distance?, expr.name, value);
            if result->is_err() {
                return .{Err=result->err()?};
            }
        } else {
            result := interpreter.globals->assign(expr.name, value);
            if result->is_err() {
                return .{Err=result->err()?};
            }
        }

        return .{Ok=value};
    }

    visit_literal_expr :: (interpreter: &Interpreter, expr: LiteralExpr) -> Result(LoxObject, RuntimeError) {
        switch expr.value {
            case s: .String {
                return .{Ok=LoxObject.{String=s}};
            }
            case b: .Bool {
                return .{Ok=LoxObject.{Bool=b}};
            }
            case n: .Number {
                return .{Ok=LoxObject.{Number=n}};
            }
            case .Null {
                return .{Ok=LoxObject.{Null=.{}}};
            }
        }
    }

    visit_group_expr :: (interpreter: &Interpreter, expr: GroupExpr) -> Result(LoxObject, RuntimeError) {
        return interpreter->evaluate(*expr.expression);
    }

    visit_binary_expr :: (interpreter: &Interpreter, expr: BinaryExpr) -> Result(LoxObject, RuntimeError) {
        // NOTE: left must be evaluated first for side-effect order
        left := interpreter->evaluate(*expr.left)->forward_err();
        right := interpreter->evaluate(*expr.right)->forward_err();

        switch expr.operator.type {
            case TokenType.MINUS {
                interpreter->_check_number_operands(expr.operator, left, right)->forward_err();
                return .{Ok=LoxObject.{Number=left.Number? - right.Number?}};
            }
            case TokenType.SLASH {
                interpreter->_check_number_operands(expr.operator, left, right)->forward_err();
                return .{Ok=LoxObject.{Number=left.Number? / right.Number?}};
            }
            case TokenType.STAR {
                interpreter->_check_number_operands(expr.operator, left, right)->forward_err();
                return .{Ok=LoxObject.{Number=left.Number? * right.Number?}};
            }
            case TokenType.PLUS {
                switch left {
                    case ln: .Number {
                        switch right {
                            case rn: .Number {
                                return .{Ok=LoxObject.{Number=ln + rn}};
                            }
                            case #default ---
                        }
                    }
                    case ls: .String {
                        switch right {
                            case rs: .String {
                                return .{Ok=LoxObject.{String=tprintf("{}{}", ls, rs)}};
                            }
                            case #default ---
                        }
                    }
                    case #default ---
                }
                return .{Err=RuntimeError.{token=expr.operator, message="Operand must be two numbers or two strings."}};
            }
            case TokenType.GREATER {
                interpreter->_check_number_operands(expr.operator, left, right)->forward_err();
                return .{Ok=LoxObject.{Bool=left.Number? > right.Number?}};
            }
            case TokenType.GREATER_EQUAL {
                interpreter->_check_number_operands(expr.operator, left, right)->forward_err();
                return .{Ok=LoxObject.{Bool=left.Number? >= right.Number?}};
            }
            case TokenType.LESS {
                interpreter->_check_number_operands(expr.operator, left, right)->forward_err();
                return .{Ok=LoxObject.{Bool=left.Number? < right.Number?}};
            }
            case TokenType.LESS_EQUAL {
                interpreter->_check_number_operands(expr.operator, left, right)->forward_err();
                return .{Ok=LoxObject.{Bool=left.Number? <= right.Number?}};
            }
            case TokenType.EQUAL_EQUAL {
                return .{Ok=LoxObject.{Bool=interpreter->_is_equal(left, right)}};
            }
            case TokenType.BANG_EQUAL {
                return .{Ok=LoxObject.{Bool=!interpreter->_is_equal(left, right)}};
            }
        }

        return .{Err=RuntimeError.{token=expr.operator, message="Unreachable error in binary expr (should be onylox bug)."}};
    }

    visit_logical_expr :: (interpreter: &Interpreter, expr: LogicalExpr) -> Result(LoxObject, RuntimeError) {
        left := interpreter->evaluate(*expr.left)->forward_err();

        if (expr.operator.type == TokenType.OR) {
            if interpreter->_is_truthy(left) {
                return .{Ok=left};
            } else {
                return interpreter->evaluate(*expr.right);
            }
        }

        if (expr.operator.type == TokenType.AND) {
            if !interpreter->_is_truthy(left) {
                return .{Ok=left};
            } else {
                return interpreter->evaluate(*expr.right);
            }
        }

        return .{Err=RuntimeError.{token=expr.operator, message="Unreachable error in logical expr (should be onylox bug)."}};
    }

    visit_unary_expr :: (interpreter: &Interpreter, expr: UnaryExpr) -> Result(LoxObject, RuntimeError) {
        right := interpreter->evaluate(*expr.right)->forward_err();

        switch expr.operator.type {
            case TokenType.MINUS {
                interpreter->_check_number_operand(expr.operator, right)->forward_err();
                return .{Ok=LoxObject.{Number=-right.Number?}};
            }
            case TokenType.BANG {
                return .{Ok=LoxObject.{Bool=!interpreter->_is_truthy(right)}};
            }
        }

        return .{Err=RuntimeError.{token=expr.operator, message="Unreachable error in unary expr (should be onylox bug)."}};
    }

    visit_variable_expr :: (interpreter: &Interpreter, expr: VariableExpr) -> Result(LoxObject, RuntimeError) {
        return interpreter->_look_up_variable(expr.name, expr);
    }

    _look_up_variable :: (interpreter: &Interpreter, name: Token, var: VariableExpr) -> Result(LoxObject, RuntimeError) {
        expr := Expr.{Variable=var};
        distance := interpreter.locals->get(expr);
        if !is_empty(distance) {
            return interpreter.environment->get_at(distance?, name.lexeme);
        }
        return interpreter.globals->get(name);
    }

    visit_call_expr :: (interpreter: &Interpreter, expr: CallExpr) -> Result(LoxObject, RuntimeError) {
        callee := interpreter->evaluate(*expr.callee)->forward_err();

        arguments := list.make(LoxObject);
        for argument_expr: expr.arguments->as_iter() {
            argument := interpreter->evaluate(*argument_expr)->forward_err();
            arguments->push_end(argument);
        }

        switch callee {
            case f: .Callable {
                if cast(u8) arguments->count() != f->arity() {
                    // NOTE: u8 int should be casted, otherwise it is treated as char!
                    return .{Err=RuntimeError.{token=expr.paren, message=tprintf("Expected {} arguments but got {}.", cast(i32) f->arity(), arguments->count())}};
                }

                return f->call(interpreter, arguments);
            }
            case #default {
                return .{Err=RuntimeError.{token=expr.paren, message="Can only call functions and clauses."}};
            }
        }
    }

    _stringify :: (interpreter: &Interpreter, obj: LoxObject) -> str {
        switch obj {
            case .Null {
                return "nil";
            }
            case v: .Number {
                s := tprintf("{}", v);
                // trim suffix .0000
                if string.ends_with(s, ".0000") {
                    return s[0..s.length-5];
                }
                return s;
            }
            case b: .Bool {
                return tprintf("{}", b);
            }
            case s: .String {
                return s;
            }
            case f: .Callable {
                switch f {
                    case .BuiltIn {
                        return "<native fn>";
                    }
                    case ff: .Function {
                        return tprintf("<fn {}>", ff.declaration.name.lexeme);
                    }
                }
            }
        }
    }

    _is_truthy :: (interpreter: &Interpreter, obj: LoxObject) -> bool {
        switch obj {
            case .Null {
                return false;
            }
            case b: .Bool {
                return b;
            }
            case #default {
                return true;
            }
        }
    }

    _is_equal :: (interpreter: &Interpreter, left: LoxObject, right: LoxObject) -> bool {
        return left == right;
    }

    // HACK: returned LoxObject is not used (it is only defined for forward_err() method)
    _check_number_operand :: (interpreter: &Interpreter, token: Token, operand: LoxObject) -> Result(LoxObject, RuntimeError) {
        switch operand {
            case .Number {
                return .{Ok=.{}};
            }
            case #default {
                return .{Err=RuntimeError.{token=token, message="Operand must be a number."}};
            }
        }
    }

    // HACK: returned LoxObject is not used (it is only defined for forward_err() method)
    _check_number_operands :: (interpreter: &Interpreter, token: Token, left: LoxObject, right: LoxObject) -> Result(LoxObject, RuntimeError) {
        switch left {
            case .Number --- // continue
            case #default {
                return .{Err=RuntimeError.{token=token, message="Operand must be numbers."}};
            }
        }
        switch right {
            case .Number --- // continue
            case #default {
                return .{Err=RuntimeError.{token=token, message="Operand must be numbers."}};
            }
        }
        return .{Ok=.{}};
    }

    _globals :: () -> Environment {
        environment := Environment.{};

        // built-in functions
        environment->define("clock", new_clock_func_object());

        return environment;
    }
}
