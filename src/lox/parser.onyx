#load "./expr"
#load "./lox"
#load "./expr"
#load "./stmt"
#load "./token"
#load "./token_type"

use core
use core { printf, tprintf }
use core.alloc { heap_allocator }
use core.alloc.arena
use core.list
use core.string

Parser :: struct {
    tokens: list.List(Token);
    current: u32 = 0;
    // HACK: alloc expr pointers for binary/unary exprs, otherwise they are deleted after return
    pool: PoolAllocator = new_pool_allocator();

    parse :: (p: &Parser) -> ? list.List(Stmt) {
        statements := list.make(Stmt);
        while !p->_is_at_end() {
            statements->push_end(p->_declaration()?);
        }

        return statements;
    }

    free :: (p: &Parser) {
        p.pool->free();
    }

    _declaration :: (p: &Parser) -> ? Stmt {
        if p->_match(TokenType.VAR) {
            o := p->_var_declaration();
            if !is_empty(o) {
                return o?;
            }
            p->_synchronize();
            return Optional.empty(Stmt);
        }

        o := p->_statement();
        if !is_empty(o) {
            return o?;
        }
        p->_synchronize();
    }

    _var_declaration :: (p: &Parser) -> ? Stmt {
        name := p->_consume(TokenType.IDENTIFIER, "Expect variable name.")?;

        initializer := Optional.empty(Expr);
        if p->_match(TokenType.EQUAL) {
            // NOTE: wrap and unwrap seems verbose, but this is nesessary for early return!
            initializer = Optional.make(p->_expression()?);
        }

        p->_consume(TokenType.SEMICOLON, "Expect ';' after variable declaration.")?;
        return Stmt.{Var=VarStmt.{name=name, initializer=initializer}};
    }

    _statement :: (p: &Parser) -> ? Stmt {
        if p->_match(TokenType.IF) {
            return p->_if_statement();
        }
        if p->_match(TokenType.PRINT) {
            return p->_print_statement();
        }
        if p->_match(TokenType.LEFT_BRACE) {
            return Stmt.{Block=BlockStmt.{statements=p->_block()?}};
        }
        if p->_match(TokenType.WHILE) {
            return p->_while_statement();
        }
        return p->_expression_statement();
    }

    _if_statement :: (p: &Parser) -> ? Stmt {
        p->_consume(TokenType.LEFT_PAREN, "Expect '(' after 'if'.")?;
        condition := p->_expression()?;
        p->_consume(TokenType.RIGHT_PAREN, "Expect ')' after if condition.");

        then_branch := p->_statement()?;
        // HACK: alloc stmt, otherwise it is deleted after return
        then_ptr := p->_alloc_stmt(then_branch);
        else_ptr: &Stmt = null;
        if (p->_match(TokenType.ELSE)) {
            else_branch := p->_statement()?;
            else_ptr = p->_alloc_stmt(else_branch);
        }

        return Stmt.{If=IfStmt.{condition=condition, then_branch=then_ptr, else_branch=else_ptr}};
    }

    _while_statement :: (p: &Parser) -> ? Stmt {
        p->_consume(TokenType.LEFT_PAREN, "Expect '(' after 'while'.")?;
        condition := p->_expression()?;
        p->_consume(TokenType.RIGHT_PAREN, "Expect ')' after condition.");

        body := p->_statement()?;
        // HACK: alloc stmt, otherwise it is deleted after return
        body_ptr := p->_alloc_stmt(body); // NOTE: move does not work with reassigning...
        return Stmt.{While=WhileStmt.{condition=condition, body=body_ptr}};
    }

    _print_statement :: (p: &Parser) -> ? Stmt {
        value := p->_expression()?;
        p->_consume(TokenType.SEMICOLON, "Expect ';' after expression.")?;
        return Stmt.{Print=PrintStmt.{expression=value}};
    }

    _expression_statement :: (p: &Parser) -> ? Stmt {
        value := p->_expression()?;
        p->_consume(TokenType.SEMICOLON, "Expect ';' after expression.")?;
        return Stmt.{Expression=ExpressionStmt.{expression=value}};
    }

    _block :: (p: &Parser) -> ? list.List(&Stmt) {
        statements := list.make(&Stmt);
        while !p->_check(TokenType.RIGHT_BRACE) && !p->_is_at_end() {
            stmt := p->_declaration()?;
            // HACK: alloc stmt, otherwise it is deleted after return
            stmt_ptr := p->_alloc_stmt(stmt); // NOTE: move does not work with reassigning...
            statements->push_end(stmt_ptr);
        }

        p->_consume(TokenType.RIGHT_BRACE, "Expect '}' after block.")?;
        return statements;
    }

    _expression :: (p: &Parser) -> ? Expr {
        return p->_assignment()?;
    }

    _assignment :: (p: &Parser) -> ? Expr {
        expr := p->_or()?;

        if p->_match(TokenType.EQUAL) {
            equals := p->_previous();
            value := p->_assignment()?;

            switch expr {
                case e: .Variable {
                    name := e.name;
                    // HACK: alloc expr, otherwise it is deleted after return
                    value_ptr := p->_alloc_expr(value); // NOTE: move does not work with reassigning...
                    return Expr.{Assign=AssignExpr.{name=name, value=value_ptr}};
                }
                case #default {
                    // just log an error (not panic)
                    p->_error(equals, "Invalid assignment target.");
                }
            }
        }

        return expr;
    }

    _or :: (p: &Parser) -> ? Expr {
        expr := p->_and()?;

        while p->_match(TokenType.OR) {
            operator := p->_previous();
            right := p->_and()?;

            // HACK: alloc expr, otherwise it is deleted after return
            expr_ptr := p->_alloc_expr(expr); // NOTE: move does not work with reassigning...
            right_ptr := p->_alloc_expr(right); // NOTE: move does not work with reassigning...
            expr = Expr.{Logical=LogicalExpr.{expr_ptr, operator, right_ptr}};
        }

        return expr;
    }

    _and :: (p: &Parser) -> ? Expr {
        expr := p->_equality()?;

        while p->_match(TokenType.AND) {
            operator := p->_previous();
            right := p->_equality()?;

            // HACK: alloc expr, otherwise it is deleted after return
            expr_ptr := p->_alloc_expr(expr); // NOTE: move does not work with reassigning...
            right_ptr := p->_alloc_expr(right); // NOTE: move does not work with reassigning...
            expr = Expr.{Logical=LogicalExpr.{expr_ptr, operator, right_ptr}};
        }

        return expr;
    }

    _equality :: (p: &Parser) -> ? Expr {
        expr := p->_comparison()?;
        while p->_match(TokenType.BANG_EQUAL, TokenType.EQUAL_EQUAL) {
            operator := p->_previous();
            right := p->_comparison()?;
            // HACK: alloc expr, otherwise it is deleted after return
            expr_ptr := p->_alloc_expr(expr); // NOTE: move does not work with reassigning...
            expr = Expr.{Binary=BinaryExpr.{left=expr_ptr, operator=operator, right=p->_alloc_expr(right)}};
        }

        return expr;
    }

    _comparison :: (p: &Parser) -> ? Expr {
        expr := p->_term()?;
        while p->_match(TokenType.GREATER, TokenType.GREATER_EQUAL, TokenType.LESS, TokenType.LESS_EQUAL) {
            operator := p->_previous();
            right := p->_term()?;
            // HACK: alloc expr, otherwise it is deleted after return
            expr_ptr := p->_alloc_expr(expr); // NOTE: move does not work with reassigning...
            expr = Expr.{Binary=BinaryExpr.{left=expr_ptr, operator=operator, right=p->_alloc_expr(right)}};
        }
        return expr;
    }

    _term :: (p: &Parser) -> ? Expr {
        expr := p->_factor()?;
        while p->_match(TokenType.MINUS, TokenType.PLUS) {
            operator := p->_previous();
            right := p->_factor()?;
            // HACK: alloc expr, otherwise it is deleted after return
            expr_ptr := p->_alloc_expr(expr); // NOTE: move does not work with reassigning...
            expr = Expr.{Binary=BinaryExpr.{left=expr_ptr, operator=operator, right=p->_alloc_expr(right)}};
        }
        return expr;
    }

    _factor :: (p: &Parser) -> ? Expr {
        expr := p->_unary()?;
        while p->_match(TokenType.SLASH, TokenType.STAR) {
            operator := p->_previous();
            right := p->_unary()?;
            // HACK: alloc expr, otherwise it is deleted after return
            expr_ptr := p->_alloc_expr(expr); // NOTE: move does not work with reassigning...
            expr = Expr.{Binary=BinaryExpr.{left=expr_ptr, operator=operator, right=p->_alloc_expr(right)}};
        }
        return expr;
    }

    _unary :: (p: &Parser) -> ? Expr {
        while p->_match(TokenType.BANG, TokenType.MINUS) {
            operator := p->_previous();
            right := p->_unary()?;
            // HACK: alloc expr, otherwise it is deleted after return
            return Expr.{Unary=UnaryExpr.{operator=operator, right=p->_alloc_expr(right)}};
        }
        return p->_primary()?;
    }

    _primary :: (p: &Parser) -> ? Expr {
        if p->_match(TokenType.FALSE) {
            return Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Bool=false}}};
        }

        if p->_match(TokenType.TRUE) {
            return Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Bool=true}}};
        }

        if p->_match(TokenType.NIL) {
            return Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Null=.{}}}};
        }

        if p->_match(TokenType.NUMBER, TokenType.STRING) {
            return Expr.{Literal=LiteralExpr.{value=p->_previous().literal}};
        }

        if p->_match(TokenType.IDENTIFIER) {
            return Expr.{Variable=VariableExpr.{name=p->_previous()}};
        }

        if p->_match(TokenType.LEFT_PAREN) {
            expr := p->_expression()?;

            // NOTE: expr is not used but errors should be checked
            p->_consume(TokenType.RIGHT_PAREN, "Expect ')' after expression.")?;

            // HACK: alloc expr, otherwise it is deleted after return
            return Expr.{Group=GroupExpr.{expression=p->_alloc_expr(expr)}};
        }

        p->_error(p->_peek(), "Expect expression.");
        return .{}; // None
    }

    _consume :: (p: &Parser, type: TokenType, message: str) -> ? Token {
        if p->_check(type) {
            return p->_advance();
        }

        p->_error(p->_peek(), message);
        return .{}; // None
    }

    _error :: (p: &Parser, token: Token, message: str) => {
        // show error message
        Lox.error(token, message);
    }

    _synchronize :: (p: &Parser) {
        p->_advance();
        while !p->_is_at_end() {
            if p->_previous().type == TokenType.SEMICOLON {
                return;
            }

            switch p->_peek().type {
                case TokenType.CLASS {
                    return;
                }
                case TokenType.FOR {
                    return;
                }
                case TokenType.FUN {
                    return;
                }
                case TokenType.IF {
                    return;
                }
                case TokenType.PRINT {
                    return;
                }
                case TokenType.RETURN {
                    return;
                }
                case TokenType.VAR {
                    return;
                }
                case TokenType.WHILE {
                    return;
                }
            }

            p->_advance();
        }
    }

    _match :: (p: &Parser, types: ..TokenType) -> bool {
        for type: types {
            if p->_check(type) {
                p->_advance();
                return true;
            }
        }
        return false;
    }

    _check :: (p: &Parser, type: TokenType) -> bool {
        if p->_is_at_end() {
            return false;
        }
        return p->_peek().type == type;
    }

    _advance :: (p: &Parser) -> Token {
        if !p->_is_at_end() {
            p.current += 1;
        }
        return p->_previous();
    }

    _is_at_end :: (p: &Parser) -> bool {
        return p->_peek().type == TokenType.EOF;
    }

    _peek :: (p: &Parser) -> Token {
        return *list.at(&p.tokens, p.current);
    }

    _previous :: (p: &Parser) -> Token {
        return *list.at(&p.tokens, p.current-1);
    }

    _alloc_expr :: macro (p: &Parser, expr: Expr) -> &Expr {
        return p.pool.allocator->move(expr);
    }

    _alloc_stmt :: macro (p: &Parser, stmt: Stmt) -> &Stmt {
        return p.pool.allocator->move(stmt);
    }
}

// NOTE: this should be macro because Allocator has a pointer internally and it will be dead after return!
new_pool_allocator :: macro () -> PoolAllocator {
    a := arena.make(heap_allocator, 32 * 1024);
    allocator := arena.make_allocator(&a);
    return PoolAllocator.{allocator=allocator, arena=a};
}

PoolAllocator :: struct {
    allocator: Allocator;
    arena: arena.Arena;

    free :: (pool: PoolAllocator) {
        arena.free(&pool.arena);
    }
}
