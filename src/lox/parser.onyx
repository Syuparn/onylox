#load "./expr"
#load "./lox"
#load "./object"
#load "./token"
#load "./token_type"

use core
use core { printf, tprintf }
use core.string

Parser :: struct {
    tokens: []Token;
    current: u32 = 0;

    _expression :: (p: &Parser) -> ? Expr {
        return p->_equality()?;
    }

    _equality :: (p: &Parser) -> ? Expr {
        expr := p->_comparison()?;
        while p->_match(TokenType.BANG_EQUAL, TokenType.EQUAL_EQUAL) {
            operator := p->_previous();
            right := p->_comparison()?;
            expr = Expr.{Binary=BinaryExpr.{left=&expr, operator=operator, right=&right}};
        }

        return expr;
    }

    _comparison :: (p: &Parser) -> ? Expr {
        expr := p->_term()?;
        while p->_match(TokenType.GREATER, TokenType.GREATER_EQUAL, TokenType.LESS, TokenType.LESS_EQUAL) {
            operator := p->_previous();
            right := p->_term()?;
            expr = Expr.{Binary=BinaryExpr.{left=&expr, operator=operator, right=&right}};
        }
        return expr;
    }

    _term :: (p: &Parser) -> ? Expr {
        expr := p->_factor()?;
        while p->_match(TokenType.MINUS, TokenType.PLUS) {
            operator := p->_previous();
            right := p->_factor()?;
            expr = Expr.{Binary=BinaryExpr.{left=&expr, operator=operator, right=&right}};
        }
        return expr;
    }

    _factor :: (p: &Parser) -> ? Expr {
        expr := p->_unary()?;
        while p->_match(TokenType.SLASH, TokenType.STAR) {
            operator := p->_previous();
            right := p->_unary()?;
            expr = Expr.{Binary=BinaryExpr.{left=&expr, operator=operator, right=&right}};
        }
        return expr;
    }

    _unary :: (p: &Parser) -> ? Expr {
        while p->_match(TokenType.BANG, TokenType.MINUS) {
            operator := p->_previous();
            right := p->_unary()?;
            return Expr.{Unary=UnaryExpr.{operator=operator, right=&right}};
        }
        return p->_primary()?;
    }

    _primary :: (p: &Parser) -> ? Expr {
        if p->_match(TokenType.FALSE) {
            return Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Bool=false}}};
        }

        if p->_match(TokenType.TRUE) {
            return Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Bool=true}}};
        }

        if p->_match(TokenType.NIL) {
            return Expr.{Literal=LiteralExpr.{value=TokenLiteral.{Null=.{}}}};
        }

        if p->_match(TokenType.NUMBER, TokenType.STRING) {
            return Expr.{Literal=LiteralExpr.{value=p->_previous().literal}};
        }

        if p->_match(TokenType.LEFT_PAREN) {
            expr := p->_expression()?;

            // NOTE: expr is not used but errors should be checked
            p->_consume(TokenType.RIGHT_PAREN, "Expect ') after expression.")?;
            return Expr.{Group=GroupExpr.{expression=&expr}};
        }

        p->_error(p->_peek(), "Expect expression.");
        return .{}; // None
    }

    _consume :: (p: &Parser, type: TokenType, message: str) -> ? Token {
        if p->_check(type) {
            return p->_advance();
        }

        p->_error(p->_peek(), message);
        return .{}; // None
    }

    _error :: (p: &Parser, token: Token, message: str) => {
        // show error message
        Lox.error(token, message);
    }

    _synchronize :: (p: &Parser) {
        p->_advance();
        while !p->_is_at_end() {
            if p->_previous().type == TokenType.SEMICOLON {
                return;
            }

            switch p->_peek().type {
                case TokenType.CLASS {
                    return;
                }
                case TokenType.FOR {
                    return;
                }
                case TokenType.FUN {
                    return;
                }
                case TokenType.IF {
                    return;
                }
                case TokenType.PRINT {
                    return;
                }
                case TokenType.RETURN {
                    return;
                }
                case TokenType.VAR {
                    return;
                }
                case TokenType.WHILE {
                    return;
                }
            }

            p->_advance();
        }
    }

    _match :: (p: &Parser, types: ..TokenType) -> bool {
        for type: types {
            if p->_check(type) {
                p->_advance();
                return true;
            }
        }
        return false;
    }

    _check :: (p: &Parser, type: TokenType) -> bool {
        if p->_is_at_end() {
            return false;
        }
        return p->_peek().type == type;
    }

    _advance :: (p: &Parser) -> Token {
        if !p->_is_at_end() {
            p.current += 1;
        }
        return p->_previous();
    }

    _is_at_end :: (p: &Parser) -> bool {
        return p->_peek().type == TokenType.EOF;
    }

    _peek :: (p: &Parser) -> Token {
        return p.tokens[p.current];
    }

    _previous :: (p: &Parser) -> Token {
        return p.tokens[p.current-1];
    }
}
