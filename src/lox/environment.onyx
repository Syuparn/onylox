#load "./object"
#load "./runtime_error"
#load "./token"
#load "./util"

use core { Result, printf, tprintf }
use core.conv
use core.map

Environment :: struct {
    enclosing: &Environment;
    value: Map(str, LoxObject) = map.literal(str, LoxObject, .[]);

    define :: (e: &Environment, name: str, value: LoxObject) => {
        e.value->put(name, value);
    }

    get_at :: (e: &Environment, distance: u32, name: str) -> Result(LoxObject, RuntimeError) {
        o := e->ancestor(distance).value->get(name);
        if is_empty(o) {
            return .{Err=RuntimeError.{message=tprintf("Undefined varible '{}'.", name)}};
        }
        return .{Ok=o?};
    }

    ancestor :: (e: &Environment, distance: u32) -> Environment {
        environment := *e;
        for i in 0..distance {
            environment = *environment.enclosing;
        }
        return environment;
    }

    get :: (e: &Environment, name: Token) -> Result(LoxObject, RuntimeError) {
        if e.value->has(name.lexeme) {
            return .{Ok=e.value->get(name.lexeme)?};
        }

        if e.enclosing != null {
            return e.enclosing->get(name);
        }

        // NOTE: this should be runtime error, otherwise functions cannot call each other
        return .{Err=RuntimeError.{token=name, message=tprintf("Undefined varible '{}'.", name.lexeme)}};
    }

    // HACK: returned LoxObject is not used (it is only defined for forward_err() method)
    assign :: (e: &Environment, name: Token, value: LoxObject) -> Result(LoxObject, RuntimeError) {
        if e.value->has(name.lexeme) {
            e.value->put(name.lexeme, value);
            return .{Ok=.{}};
        }

        if e.enclosing != null {
            return e.enclosing->assign(name, value);
        }

        return .{Err=RuntimeError.{token=name, message=tprintf("Undefined varible '{}'.", name.lexeme)}};
    }

    // HACK: returned LoxObject is not used (it is only defined for forward_err() method)
    assign_at :: (e: &Environment, distance: u32, name: Token, value: LoxObject) -> Result(LoxObject, RuntimeError) {
        env := e->ancestor(distance);
        if env.value->has(name.lexeme) {
            env.value->put(name.lexeme, value);
            return .{Ok=.{}};
        }

        return .{Err=RuntimeError.{token=name, message=tprintf("Undefined varible '{}'.", name.lexeme)}};
    }
}

// define format for printf (just for tests and debugs)
@conv.Custom_Format_Proc.{ Environment }
(output: &conv.Format_Output, format: &conv.Format, environment: &Environment) {
    if environment.enclosing == null {
        conv.format(output, "Environment { enclosing = { null }, value = { {} } }", environment.value);
        return;
    }
    conv.format(output, "Environment { enclosing = { {} }, value = { {} } }", *environment.enclosing, environment.value);
}
