#load "./expr"
#load "./object"
#load "./runtime_error"
#load "./util"

use core
use core { printf, Result, tprintf }
use core.slice
use core.string

ASTPrinter :: struct {
    // HACK: receiver must have non-void fields, otherwise the error `Function parameters cannot have 'void' as their type.` is raised
    _dummy: bool;

    print :: (p: ASTPrinter, expr: Expr) -> Result(LoxObject, RuntimeError) {
        return expr->accept(p);
    }

    visit_binary_expr :: (p: ASTPrinter, expr: BinaryExpr) -> Result(LoxObject, RuntimeError) {
        return p->parenthesize(expr.operator.lexeme, expr.left, expr.right);
    }

    visit_logical_expr :: (p: ASTPrinter, expr: LogicalExpr) -> Result(LoxObject, RuntimeError) {
        return p->parenthesize(expr.operator.lexeme, expr.left, expr.right);
    }

    visit_unary_expr :: (p: ASTPrinter, expr: UnaryExpr) -> Result(LoxObject, RuntimeError) {
        return p->parenthesize(expr.operator.lexeme, expr.right);
    }

    visit_literal_expr :: (p: ASTPrinter, expr: LiteralExpr) -> Result(LoxObject, RuntimeError) {
        s := p->_visit_literal_expr(expr);
        return .{Ok=LoxObject.{String=s}};
    }

    visit_group_expr :: (p: ASTPrinter, expr: GroupExpr) -> Result(LoxObject, RuntimeError) {
        return p->parenthesize("group", expr.expression);
    }

    _visit_literal_expr :: (p: ASTPrinter, expr: LiteralExpr) -> str {
        switch expr.value {
            case .Null {
                return "nil";
            }
            case s: .String {
                return tprintf("\"{}\"", s);
            }
            case n: .Number {
                return tprintf("{}", n);
            }
            case #default {
                return tprintf("{}", expr.value);
            }
        }
    }

    visit_variable_expr :: (p: ASTPrinter, expr: VariableExpr) -> Result(LoxObject, RuntimeError) {
        return .{Ok=LoxObject.{String=tprintf("(var {})", expr.name.lexeme)}};
    }

    visit_assign_expr :: (p: ASTPrinter, expr: AssignExpr) -> Result(LoxObject, RuntimeError) {
        obj := (*expr.value)->accept(p)->ok()?;
        value := obj.String->unwrap();
        return .{Ok=LoxObject.{String=tprintf("(= {} {})", expr.name.lexeme, value)}};
    }

    visit_call_expr :: (p: ASTPrinter, expr: CallExpr) -> Result(LoxObject, RuntimeError) {
        exprs := slice.make(&Expr, list_count(&Expr, expr.arguments) + 1);
        exprs[0] = expr.callee;
        i := 1;
        for argument: expr.arguments->as_iter() {
            exprs[i] = argument;
            i = i + 1;
        }

        return p->parenthesize("call", exprs);
    }

    parenthesize :: #match {
        // HACK: overload for variadic arguments and argument slice
        (p: ASTPrinter, name: str, exprs: ..&Expr) -> Result(LoxObject, RuntimeError) {
            return p->parenthesize(name, exprs);
        },
        (p: ASTPrinter, name: str, exprs: []&Expr) -> Result(LoxObject, RuntimeError) {
            // TODO: replace with initialize function
            buffer_memory := "                                                                                               ";
            buffer := string.buffer_make(buffer_memory, "(");
            string.buffer_append(&buffer, name);
            for expr: exprs {
                string.buffer_append(&buffer, " ");

                if expr == null {
                    // NOTE: do not raise error here (because this is used for debugging)
                    string.buffer_append(&buffer, "<null Expr (should be Onylox bug)>");
                } else {
                    obj := (*expr)->accept(p)->ok()?;

                    s := obj.String?;
                    string.buffer_append(&buffer, s);
                }
            }
            string.buffer_append(&buffer, ")");

            return .{Ok=LoxObject.{String=string.buffer_to_str(&buffer)}};
        },
    }
}
