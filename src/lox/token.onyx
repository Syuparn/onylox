#load "./token_type"

use core { tprintf }
use core.conv

Token :: struct {
    type: TokenType;
    lexeme: str;
    literal: TokenLiteral;
    line: u32;
}

TokenLiteral :: union {
    String: str;
    Number: f64;
    Null: void;
}

#operator == (l1, l2: TokenLiteral) -> bool {
    switch l1 {
        case s1: .String {
            switch l2 {
                case s2: .String {
                    return s1 == s2;
                }
                case #default {
                    return false;
                }
            }
        }
        case n1: .Number {
            switch l2 {
                case n2: .Number {
                    return n1 == n2;
                }
                case #default {
                    return false;
                }
            }
        }
        case _n1: .Null {
            switch l2 {
                case _n2: .Null {
                    return true;
                }
                case #default {
                    return false;
                }
            }
        }
        case #default {
            return false;
        }
    }
}

// define format for printf
@conv.Custom_Format_Proc.{ Token }
(output: &conv.Format_Output, format: &conv.Format, token: &Token) {
    conv.format(output, "{} {} {}", token.type, token.lexeme, token.literal);
}
